[{"path":"https://lambdamoses.github.io/VoaygerHackathon/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Sean Davis Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/info.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Event info","text":"understand workshop material, expected familiar : Vector, matrix, data frame, list construction operations R Data visualization ggplot2 package Statistics linear algebra, including principal component analysis (PCA) Writing functions R want participate hackathon workshop material either taken documentation websites Voyager SpatialFeatureExperiment soon become part websites. Relevant vignettes linked relevant sections. freely available resources listed helpful understanding workshop; strongly recommend consult unfamiliar topic interest: R Data Science: Intro data wrangling visualization Tidyverse. visualization regular expression parts relevant workshop hackathon. Please read haven’t used ggplot2 . Geocomputation R: Geospatial tools used represent operate geometries raster images SFE. See R package dev workshop page prerequisites system setup hackathon. Please system setup described R package dev workshop hands experience.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/info.html","id":"workshop-goals-and-objectives","dir":"Articles","previous_headings":"","what":"Workshop goals and objectives","title":"Event info","text":"Learn technologies collect spatial -omics data, focus transcriptomics Experience exploratory data analysis spatial information front center Get taste geospatial tradition Learn develop R packages Bioconductor","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/info.html","id":"what-you-will-learn","dir":"Articles","previous_headings":"Workshop goals and objectives","what":"What you will learn","title":"Event info","text":"Use operate SFE objects Spatial data visualization Geometric operations Create spatial neighborhood graphs Run spatial analyses different fields SFE objects Visualize spatial analysis results Math commonly used ESDA methods Write, document, test R packages Git version control collaborative development","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/info.html","id":"what-you-will-not-learn","dir":"Articles","previous_headings":"Workshop goals and objectives","what":"What you will not learn","title":"Event info","text":"Data integration across multiple samples Spatial multi -omics, although Voyager vignette forthcoming Python implementation Voyager","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/info.html","id":"to-use-the-docker-image","dir":"Articles","previous_headings":"","what":"To use the Docker image","title":"Event info","text":"workshop can run remotely https://workshop.bioconductor.org/. Create free account log , left menu past events, scroll bottom find workshop, can still accessed afterwards. Alternatively, can run locally Docker image: running, navigate http://localhost:8787/ log rstudio:yourchosenpassword. required packages appropriate version (Bioc 3.19, March 2024) pre-installed Workshop Galaxy Docker image.","code":"# Not working yet as of Fed 27 docker run -e PASSWORD=<choose_a_password_for_rstudio> -p 8787:8787 ghcr.io/lambdamoses/voyagerhackathon"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/info.html","id":"location","dir":"Articles","previous_headings":"","what":"Location","title":"Event info","text":"solidarity occupation, colonization injustices inflicted First Nations, acknowledge unceded territory Tongva/Kizh people called territory Tovaangar. Caltech near village Tobpet. Today, Tovaangar/much LA-OC-IE metropolitan area still home many Indigenous people across Turtle Island grateful opportunity live research territory. Recognizing whose land start stop . can reconciliation without conciliation can conciliation without reparations. First Nations, must remember /guests land need better guests. (Abridged el-Tawhid Juma Circle) workshop hackathon located Morgan Library second floor Kerckhoff building Caltech. See map: map, accessible entrance marked pink, north entrance Norman W. Church Laboratory connected Kerckhoff building. elevator marked orange: go corridor entering Church make slight right. coming elevator, make left Morgan Library (marked red box) left, heavy glass doors. Inside Morgan Library library named geneticist Thomas Hunt Morgan, father modern genetics mapped Drosophila genes chromosomes Fly Room Columbia 1920s moving Caltech (said “” instead “” lone genius myth false dangerous). can find schematics historical Drosophila genetic mapping chromosomes 3rd floor building corridor connecting Kerckhoff Church. Comprehensive mapping gene regulation network sea urchin development also performed building Eric H. Davidson lab; sea urchin images can seen corridors building. labs Caltech studying unique model organisms, jellyfish, squid, rove beetles besides sea urchin. honor take molecular biology lab course sea urchin development Eric’s student Peiyun Lee UCLA undergrad (whole mount situ hybridization sea urchin embryos). part glorious tradition workshop extends tradition future. Meanwhile, Caltech admit female students building built (1928), initially women’s restroom. restroom second floor converted women’s restroom bizarre structure. lab (Pachter Lab) used basement building, taking sea urchin lab space Eric passed away. moved Chen building 2021; former Kerckhoff space still empty. moved, women’s restroom basement 1st floor, either walk long way Church building climb 2 floors 2nd floor restroom. recently restroom situation seems fixed; took almost century.","code":""},{"path":[]},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/info.html","id":"workshop-on-march-4","dir":"Articles","previous_headings":"Schedule","what":"Workshop on March 4","title":"Event info","text":"’re already hungry, can walk S Lake Ave dinner walking tour Old Pasadena (40 minutes walk Caltech) passing Playhouse District. ’re hungry yet, can walk Old Pasadena dinner .","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/info.html","id":"hackathon-on-march-5-8","dir":"Articles","previous_headings":"Schedule","what":"Hackathon on March 5-8","title":"Event info","text":"Morgan Library reserved 9:30 6 pm every day. don’t time; special thing place awesome historical atmosphere current Voyager crew answer questions help . can make new friends. Cool fact: copy first issue Nature . can pull show . March 5 1 pm: Campus tour lunch break","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/info.html","id":"food","dir":"Articles","previous_headings":"","what":"Food","title":"Event info","text":"deeply apologize funding provide food March 4, ’ll bring snacks every day. can get three meals campus Red Door Cafe Browne (main dining hall) campus (meal plan required). also numerous restaurants cafes S Lake Ave west campus minutes walk away. map shows restaurants decent vegan options (lighter green though might need ask tahini falafel wraps yogurt ) halal restaurants (darker green) like central Pasadena (red box indicates Morgan Library), click points description: Also, maps show bike paths bike lanes. want wander around LA, also LA food hall fame map , also includes ice cream shops (pink) cafes (brown), click points description. bar enter hall fame much higher previous map. anything, can’t recommend Villa’s Tacos Highland Park (5455 N Figueroa St) enough.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/info.html","id":"la-guide","dir":"Articles","previous_headings":"","what":"LA guide","title":"Event info","text":"town wonder visit hackathon: map shows places like LA, mostly nooks crannies beaten track, obviously biased kinds things like, wilderness, historical buildings, murals, gardens, public art, art galleries. many worlds LA outside Hollywood. Yes, biked places, typically either Pasadena Westwood. part back story behind “geospatial spatial -omics”, can tell breaks.","code":""},{"path":[]},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"resources","dir":"Articles","previous_headings":"Introduction","what":"Resources","title":"Intro to R package development","text":"freely available resources may helpful participating hackathon: R Packages: Please read don’t prior experiences writing R packages. learn structure R packages write documentation unit tests. Advanced R: book give intermediate R users depth understanding R language. Please read want tackle issues marked “advanced”, may involve S4 classes functional programming. Bioconductor developer guide: Explains details requirements Bioconductor packages. R Packages book explains CRAN requirements, Bioconductor different often stringent requirements. Extending ggplot2: Advanced ggplot2 topic relevant plotting image behind geometries Voyager.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"system-setup","dir":"Articles","previous_headings":"Introduction","what":"System setup","title":"Intro to R package development","text":"order participate hackathon, need GitHub account git installed computer. haven’t used git , read Git Basics chapter get started. RStudio GUI git make things easier, default upper right panel R project interest version controlled git. Version control helps keep track changes code merge contributions collaborators. also need install devel version R (4.4.0) RStudio IDE. Devel version R Bioconductor releases tied R versions. Bioconductor two releases every year, synced R release schedule, one late April, late October. April release corresponds bump minor version R (e.g. going 4.3.x 4.4.0). R packages installed one minor version R incompatible different minor version (e.g. packages installed R 4.3.0 still work 4.3.1, work 4.2.x 4.4.0). use one package given Bioconductor release (3.19 upcoming one April), must use package release well. users 6 month period relative stability. Developers introduce breaking changes experimental features devel version (3.19 writing 3.18 current release), changes don’t immediately break users’ code. hackathon uses devel version. Moreover, can install previous versions Bioconductor, corresponding versions R, go back time reproduce analyses old package versions. Bioconductor packages used must Bioconductor release packages checked within release, newer breaking changes dependencies introduced release break old code, thus providing backward compatibility. However, perfect, since CRAN GitHub packages don’t release schedule, ’s possible difficult install old versions CRAN packages. Git version control also makes possible difficult install old versions GitHub packages. Xcode Command Line Tools required Mac users Rtools Windows users need compile dependencies SFE Voyager source, particularly sf package several system dependencies. See instructions install system dependencies sf . Binaries available Windows Mac compilation might necessary. Next git clone repository interest (Run command line (Terminal Mac something like Git Bash PowerShell Windows; RStudio also Terminal pane default bottom left), R console): create directory SpatialFeatureExperiment Voyager source code package located. RStudio, create project, choose Existing Directory, navigate SpatialFeatureExperiment Voyager directory, RStudio open project. Next, RStudio, R console, install devtools (makes easier build, install, test packages development), roxygen2 (generate documentation pages), usethis (makes easier add unit tests vignettes), BiocManager (install manage Bioconductor packages) CRAN: Install devel version Bioconductor: install dependencies; also install packages suggested imported SFE Voyager (.e. soft, optional dependencies) well packages required build test package; can take compiling packages source: See Chapter 2 R Packages details setup. work anything related readXenium() BioFormatsImage class Mac, please read instructions install optional RBioFormats package BioFormats Java library used behind scene Java needs special setup Mac.","code":"# SFE git clone https://github.com/pachterlab/SpatialFeatureExperiment.git  # Voyager git clone https://github.com/pachterlab/voyager.git install.packages(c(\"devtools\", \"roxygen2\", \"usethis\", \"BiocManager\")) BiocManager::install(version = \"devel\") devtools::install_dev_deps()"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"live-demo","dir":"Articles","previous_headings":"","what":"Live demo","title":"Intro to R package development","text":"go Chapter 1 R Packages give glimpses aspects package development. topics covered last part Advanced R book. ’s outline:","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"why-write-a-package","dir":"Articles","previous_headings":"Live demo","what":"Why write a package?","title":"Intro to R package development","text":"paraphrase David Robinson, copy paste code 3 times, write function. need change code, need change rather 3 times. extension, copy function 3 times, write package, ’s easier others reuse function. ’s also easier install package CRAN, Bioconductor, GitHub one line code manually download scripts sort things (file paths) work author’s computer. Hence writing package better way share code. Furthermore, R built-infrastructure check package problems (R CMD check). package can also structure analyses. fact, workshop R package although R functions. functions need written data analysis project, package, ’s easier load functions accounting interdependence. workshop material vignettes (long form documentation). ’s also easier install dependencies required versions one line code (dependencies listed DESCRIPTION file) build workshop website pkgdown package designed build package documentation websites (like one Voyager).","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"structure-of-r-packages","dir":"Articles","previous_headings":"Live demo","what":"Structure of R packages","title":"Intro to R package development","text":"DESCRIPTION: Basic info package, including name, version, author info, title, scription, dependencies. Info shown CRAN Bioconductor landing page ckage. NAMESPACE: functions package (.e. dependency) imported ckage? functions package exported user? NEWS.md: new features implemented version LICENSE.md: License, MIT, GPL, BSD, Artistic, etc. README.md: first page see visiting GitHub repo documentation website e package. least describe package install , sometimes also ttle use well, shouldn’t long. ’s long, gnette instead. R: R source code package man: Documentation files, generated automatically roxygen2, don’t edit hand. However, ey used written hand. syntax similar Latex. greatly appreciate roxygen2 ep documentation code together greatly simplify syntax. roxygen2 also gives warnings en problems documentation rendering automatically writes NAMESPACE, ving tedious bookkeeping steps. vignettes: Long form documentation, usually Rmd inst: Put small example datasets code used generate can used sting function examples. Also put citation info . Larger datasets ckages. size limit software packages Bioconductor. src: Code compiled languages used package, usually C /C++, Fortran old ckages. ’s absent ’s R code package. Since R written C rtran, R native interface C Fortran. Rcpp package streamlines interface R C++ RStudio isn’t bad C++ IDE. tests: Unit tests .Rbuildignore: Files ignore building R package, GitHub tions workflow files, RStudio project settings (*.Rproj), kgdown` documentation website build files. .gitignore: Files ignored git version control, usually *.Rproj file anything ecific personal R session R history.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"demo-on-toy-package","dir":"Articles","previous_headings":"Live demo","what":"Demo on toy package","title":"Intro to R package development","text":"Load package informal testing: shift+command+L (Mac), control+shift+L (Windows), devtools::load_all() Render package documentation: shift+command+D (Mac), control+shift+D (Windows), needs setup: Tools Project Options -> Build Tools -> check Generate documentation Roxygen Run unit tests: shift+command+T (Mac), control+shift+T (Windows) “Build” “Git” tabs top right pane RStudio","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"dependencies","dir":"Articles","previous_headings":"Live demo","what":"Dependencies","title":"Intro to R package development","text":"Imports vs. Suggests: Imported packages must installed order install package. contrast, suggested packages don’t installed, code check whether ’re installed calling functions. package uses another package marginal functionality, package suggested instead imported. Try minimize since broken dependency break package dependencies Biocondoctor packages must CRAN Bioconductor rev ed tested, GitHub packages R CMD check: automated check problems package structure, code, documentation. also builds vignettes runs examples unit tests. ’s CRAN software packages Bioconductor every day.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"how-to-write-documentation-with-roxygen2","dir":"Articles","previous_headings":"Live demo","what":"How to write documentation with roxygen2","title":"Intro to R package development","text":"Users future self thank writing documentation. often look cumentation. often write documentation actually implementing function help think really want function Bioconductor requires document arguments exported functions Must document output exported functions exported functions must examples (required Bioconductor required pass R CMD eck) Documenting multiple related functions documentation page Build documentation website pkgdown","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"how-to-debug","dir":"Articles","previous_headings":"Live demo","what":"How to debug","title":"Intro to R package development","text":"Break point: Click space left line numbers RStudio loading package. Next time run code, stop enter debug mode step code inside functions line line see ’s causing error. browser(): Similar breakpoints, put line code code like inspect. helpful debugging S4 methods since RStudio IDE doesn’t work well S4 methods inside setMethod(). S4 methods, say SpatialFeatureExperiment method dimGeometry, S4 class specified signature argument, run debug(dimGeometry, signature = \"SpatialFeatureExperiment\"). thing undebug(). traceback(): Find line code caused recent error series function calls led line code. options(error = recover): get error, can enter debug mode right error occured. Run options(error = NULL) restore default behavior. options(warn = 2): get warning wonder comes , convert warnings errors can use traceback() find warning comes . Run options(warn = 0) restore default behavior.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"why-and-how-to-write-unit-tests","dir":"Articles","previous_headings":"Live demo","what":"Why and how to write unit tests","title":"Intro to R package development","text":"use testthat, unit test frameworks well Use vdiffr unit test plotting functions ’s finicky since requires exact match often doesn’t work geom_sf() requires geospatial systems dependencies can lead subtle differences invisible human eye break vdiffr. Code coverage: percentage code run unit tests, though metric can gamed writing code, try see works. unit tests, save informal tests can run automatically. may initially time consuming tedious, long run saves time makes package stable, fix bug, refactor code, implement new features, can run existing tests one line code clicking one button check new edits broke existing functionalities. Unit tests test functionality separately test isolated possible ’s easier track broke test fails. isolation also forces write modular code. test user facing functions don’t need change tests every time change internals. testing entire workflow rather one functionality, ’s called integration test. However, practice, least R, sometimes find something unit integration tests. tests performed small datasets possible can run quickly daily CRAN Bioconductor check. update dependency R breaks code, likely know unit tests high test coverage. Whenever fix bug, write new unit test. Trying increase code coverage (.e. make sure code tested) make think carefully function behave identify code never used. Finally, unit tests serve documentation well. fact, example code SFE Voyager function documentation often copied unit tests.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"how-to-speed-up-code-optimization","dir":"Articles","previous_headings":"Live demo","what":"How to speed up code (optimization)","title":"Intro to R package development","text":"“Premature optimization root evil”. Need consider user friendliness, readability, d maintainability. Faster != better; analyze data C. Timing code execution (system.time(), microbenchmark, bench) Avoid slow R loops vectorization matrix multiplication Profiling profvis Rcpp primer (time permits): Run usethis::use_rcpp() set package Rcpp. Use Rcpp really loopy code thousands iterations can’t vectorized need use C++ library. many Rcpp* packages make easy use C++ libraries R, RcppArmadillo, RcppEigen, BH, RcppGSL, . Speaking previous point necessarily optimization, check reticulate basilisk call Python code R. can R Python code chunks Rmd Quarto RStudio, can access R objects Python code chunks vice versa.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"other","dir":"Articles","previous_headings":"Live demo","what":"Other","title":"Intro to R package development","text":"pull requests: Suppose want contribute someone else’s package. first make copy package (fork repo), work copy, ’re done request author pull changes (hence ’s called “pull request”) original repo contribution can officially become part package. hackathon, pull requests, review merge pull requests. submit packages Bioconductor (time permits)","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/package.html","id":"voyager-vignette-guidelines","dir":"Articles","previous_headings":"","what":"Voyager vignette guidelines","title":"Intro to R package development","text":"Vignettes main devel branch, documentation documentation-devel branches. Voyager package, vignette pull request fork documentation-devel branch, vignettes development. new vignette ready, merge documentation-devel branch documentation branch, production version Voyager documentation website. Rules documentation-devel branch: purpose branch make pkgdown website longer detailed vignettes make installed size package way large comply Bioconductor’s 5 MB rule. Don’t change anything outside vignettes directory branch. code doesn’t work, change main devel branch merge branch. way large vignettes won’t get main branch code kept consistent, important since pkgdown website also documents functions package. Exception previous rule: may add packages Suggests field DESCRIPTION extra packages used vignettes. file vignettes/ref.bib automatically synced Paperpile. Don’t edit hand.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"spatialfeatureexperiment","dir":"Articles","previous_headings":"","what":"SpatialFeatureExperiment","title":"SpatialFeatureExperiment","text":"SpatialFeatureExperiment (SFE) new S4 class built top SpatialExperiment (SPE). SFE incorporates geometries geometric operations sf package. Examples supported geometries Visium spots represented polygons corresponding size, cell nuclei segmentation polygons, tissue boundary polygons, pathologist annotation histological regions, transcript spots genes. Using sf, SpatialFeatureExperiment leverages GEOS C++ library underlying sf geometry operations, including algorithms determining whether geometries intersect, finding intersection geometries, buffering geometries margins, etc. schematic SFE object shown :  list SFE features extend SPE object: colGeometries sf data frames associated entities correspond columns gene count matrix, Visium spots cells. geometries sf data frames can Visium spot centroids, Visium spot polygons, datasets single cell resolution, cell nuclei segmentations. Multiple colGeometries can stored SFE object, one cell segmentation another nuclei segmentation. can non-spatial, attribute columns colGeometry rather colData, sf class allows users specify attributes relate geometries, “constant”, “aggregate”, “identity”. See agr argument st_sf documentation. colGraphs spatial neighborhood graphs cells spots. graphs class listw (spdep package), colPairs SingleCellExperiment used conversion necessary use numerous spatial dependency functions spdep, Moran’s , Geary’s C, Getis-Ord Gi*, LOSH, etc. Conversion also needed classical spatial statistics packages spatialreg adespatial. rowGeometries similar colGeometries, support entities correspond rows gene count matrix, genes. shall see , use case store transcript spots gene smFISH situ sequencing based datasets. rowGraphs similar colGraphs. potential use case may spatial colocalization transcripts different genes. annotGeometries sf data frames associated dataset directly gene count matrix, tissue boundaries, histological regions, cell nuclei segmentation Visium datasets, etc. geometries stored object facilitate plotting using sf operations find number nuclei Visium spot histological regions Visium spot intersects. Unlike colGeometries rowGeometries, number rows sf data frames annotGeometries constrained dimension gene count matrix can arbitrary. annotGraphs similar colGraphs rowGraphs, entities directly associated gene count matrix, spatial neighborhood graphs nuclei Visium datasets, objects like myofibers. graphs relevant spdep analyses attributes geometries spatial autocorrelation morphological metrics myofibers nuclei. geometry operations sf, attributes results analyses attributes (e.g. spatial regions defined attributes) may related back gene expression. localResults similar reducedDims SingleCellExperiment, stores results univariate bivariate local spatial analysis results, localmoran, Getis-Ord Gi*, local spatial heteroscedasticity (LOSH). Unlike reducedDims, type results (type type analysis Getis-Ord Gi*), feature (e.g. gene) pair features analysis performed results. local spatial analyses can also performed attributes colGeometries annotGeometries addition gene expression colData. Results multivariate spatial analysis MULTISPATI PCA can stored reducedDims. imgData store images associated dataset. field inherited SPE, SFE extended image functionalities images loaded memory unless necessary.","code":"library(sf) library(terra) library(ggplot2) library(SingleCellExperiment) library(scater) library(scran) library(SpatialFeatureExperiment) library(SFEData) library(Voyager) library(EBImage) library(scales) theme_set(theme_bw())"},{"path":[]},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"visium","dir":"Articles","previous_headings":"Create an SFE object","what":"Visium","title":"SpatialFeatureExperiment","text":"10x Genomics Space Ranger output Visium experiment can read similar manner SpatialExperiment; SpatialFeatureExperiment SFE object spotPoly column geometry spot polygons. filtered matrix (.e. spots tissue) read , column graph called visium also present spatial neighborhood graph Visium spots tissue. graph computed spots read regardless whether tissue. results tissue capture outs directory sample directory. Inside outs directory, directories may present: raw_reature_bc_matrix unfiltered gene count matrix, filtered_feature_bc_matrix gene count matrix spots tissue, spatial spatial information. matrix directories contain matrices MTX format sparse matrices. Space Ranger also outputs matrices h5 files, read R similar way MTX. Inside matrix directory: Inside spatial directory: tissue_lowres_image.png low resolution image tissue. Visium datasets files . barcode_fluorescence_intensity.csv file present datasets fluorescent imaging rather bright field H&E. Space Ranger output includes gene count matrix, spot coordinates, spot diameter. Space Ranger output include nuclei segmentation pathologist annotation histological regions. Extra image processing, ImageJ QuPath, required geometries.","code":"dir <- system.file(\"extdata\", package = \"SpatialFeatureExperiment\") sample_ids <- c(\"sample01\", \"sample02\") (samples <- file.path(dir, sample_ids)) #> [1] \"/usr/local/lib/R/site-library/SpatialFeatureExperiment/extdata/sample01\" #> [2] \"/usr/local/lib/R/site-library/SpatialFeatureExperiment/extdata/sample02\" list.files(file.path(samples[1], \"outs\")) #> [1] \"filtered_feature_bc_matrix\" \"spatial\" list.files(file.path(samples[1], \"outs\", \"filtered_feature_bc_matrix\")) #> [1] \"barcodes.tsv\" \"features.tsv\" \"matrix.mtx\" list.files(file.path(samples[1], \"outs\", \"spatial\")) #> [1] \"aligned_fiducials.jpg\"              \"barcode_fluorescence_intensity.csv\" #> [3] \"detected_tissue_image.jpg\"          \"scalefactors_json.json\"             #> [5] \"spatial_enrichment.csv\"             \"tissue_hires_image.png\"             #> [7] \"tissue_lowres_image.png\"            \"tissue_positions.csv\" (sfe3 <- read10xVisiumSFE(samples, sample_id = sample_ids, type = \"sparse\",                            data = \"filtered\")) #> class: SpatialFeatureExperiment  #> dim: 5 25  #> metadata(0): #> assays(1): counts #> rownames(5): ENSG00000014257 ENSG00000142515 ENSG00000263639 #>   ENSG00000163810 ENSG00000149591 #> rowData names(14): symbol Feature.Type ... #>   Median.Normalized.Average.Counts_sample02 #>   Barcodes.Detected.per.Feature_sample02 #> colnames(25): GTGGCGTGCACCAGAG-1 GGTCCCATAACATAGA-1 ... #>   TGCAATTTGGGCACGG-1 ATGCCAATCGCTCTGC-1 #> colData names(10): in_tissue array_row ... channel3_mean channel3_stdev #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> unit: full_res_image_pixel #> Geometries: #> colGeometries: spotPoly (POLYGON)  #>  #> Graphs: #> sample01: col: visium #> sample02: col: visium"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"vizgen-merfish","dir":"Articles","previous_headings":"Create an SFE object","what":"Vizgen MERFISH","title":"SpatialFeatureExperiment","text":"Bioc 3.19, following read functions implemented SFE: read10xVisiumSFE, readVizgen (MERFISH), readCosMX, readXenium. Read functions commercial technologies implemented soon, can help writing one hackathon, Molecular Cartography. demonstrate MERFISH cell_boundaries directory hdf5 file cell segmentation polygons, rather slow read, ’s faster read cell segmentation polygons cell_boundaries.parquet file. parquet file stores column-oriented data efficiently old fashioned csv can contain Simple Feature geometry data. cell_by_gene.csv file gene count matrix. detected_transcripts.csv coordinates transcript spots reformatted new parquet file readVizgen called add_molecules = TRUE (default FALSE) transcript spots can read R much quickly next time data read. larger datasets, reformatting can take . Look image data stored imgData field; actual images data column. go getters images plot images later. images directory contains images 3 types cell membrane stains, DAPI (nuclei), PolyT (polyadenylated transcripts, visualizing whole cells). multiple z-planes, default center plane (3rd plane) read, can changed. cell segmentation z-planes Vizgen output. See vignette creating SFE objects scratch spatial trancriptomics technologies.","code":"fn <- system.file(\"extdata/vizgen_cellbound\", package = \"SpatialFeatureExperiment\") list.files(fn) #> [1] \"cell_boundaries\"          \"cell_boundaries.parquet\"  #> [3] \"cell_by_gene.csv\"         \"cell_metadata.csv\"        #> [5] \"detected_transcripts.csv\" \"images\" file.copy(fn, \".\", recursive = TRUE) #> [1] TRUE (sfe_vizgen <- readVizgen(\"vizgen_cellbound\", add_molecules = TRUE)) #> >>> 1 `.parquet` files exist: #> /__w/VoyagerHackathon/VoyagerHackathon/vignettes/vizgen_cellbound/cell_boundaries.parquet #> >>> using -> /__w/VoyagerHackathon/VoyagerHackathon/vignettes/vizgen_cellbound/cell_boundaries.parquet #> >>> Cell segmentations are found in `.parquet` file #> Removing 35 cells with area less than 15 #> >>> filtering geometries to match 1023 cells with counts > 0 #> >>> Reading transcript coordinates #> >>> Converting transcript spots to geometry #> >>> Writing reformatted transcript spots to disk #> >>> Total of 26 features/genes with `min_phred` < 20 are removed from SFE object #> >>> To keep all features -> set `min_phred = NULL` #> class: SpatialFeatureExperiment  #> dim: 62 1023  #> metadata(0): #> assays(1): counts #> rownames(62): CD4 TLL1 ... Blank-37 Blank-39 #> rowData names(0): #> colnames(1023): 112824700230101267 112824700230101269 ... #>   112824700330100848 112824700330100920 #> colData names(11): fov volume ... solidity sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : center_x center_y #> imgData names(4): sample_id image_id data scaleFactor #>  #> unit: micron #> Geometries: #> colGeometries: centroids (POINT), cellSeg (POLYGON)  #> rowGeometries: txSpots (MULTIPOINT)  #>  #> Graphs: #> sample01: imgData(sfe_vizgen) #> DataFrame with 5 rows and 4 columns #>     sample_id      image_id   data scaleFactor #>   <character>   <character> <list>   <numeric> #> 1    sample01 Cellbound1_z3   ####           1 #> 2    sample01 Cellbound2_z3   ####           1 #> 3    sample01 Cellbound3_z3   ####           1 #> 4    sample01       DAPI_z3   ####           1 #> 5    sample01      PolyT_z3   ####           1"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"non-spatial-operations-of-sfe-objects","dir":"Articles","previous_headings":"","what":"Non-spatial operations of SFE objects","title":"SpatialFeatureExperiment","text":"Operations SFE objects demonstrated small toy dataset (may need answer prompt R console downloading dataset):","code":"(sfe <- McKellarMuscleData(dataset = \"small\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> class: SpatialFeatureExperiment  #> dim: 15123 77  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(77): AAATTACCTATCGATG AACATATCAACTGGTG ... TTCTTTGGTCGCGACG #>   TTGATGTGTAGTCCCG #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> unit: full_res_image_pixels #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries: tissueBoundary (POLYGON), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A:"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"singlecellexperiment-getters-and-setters","dir":"Articles","previous_headings":"Non-spatial operations of SFE objects","what":"SingleCellExperiment getters and setters","title":"SpatialFeatureExperiment","text":"SFE object SCE object SFE builds top SCE, inherits SCE, SCE methods apply. “inherits” just like bioinformatician human, “bioinformatician” bit like SFE “human” like SCE. go SCE getters setters. center SCE gene count matrix. can get set gene count matrix counts function: log normalizing data, similarly logcounts function can used get set log normalized gene count matrix. gene count matrix metadata cells genes. Use colData function get cell metadata rowData get gene metadata Just like Seurat, SCE object can subsetted like matrix. Visium spots intersect tissue. dataset, whether spot intersects tissue column colData called in_tissue, ’ll subset SFE object keep spots tissue, keep genes detected. colData columns SCE can accessed $ operator getting column data frame. PCA part standard scRNA-seq data analysis workflow. ’ll first normalize data perform PCA get PCA results. Later see Voyager spatial analysis functions modeled runPCA un user interface. reducedDim function can used get set dimension reduction results. User interfaces get set geometries spatial graphs emulate reducedDims row/colPairs SingleCellExperiment. Column row geometries also emulate reducedDims internal implementation, annotation geometries spatial graphs differ. second argument used specify dimension reduction result get. ’s specified, default first one retrieved, code equivalent previous chunk: dimension reductions present?","code":"m <- counts(sfe) head(m) #> 6 x 77 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 77 column names 'AAATTACCTATCGATG', 'AACATATCAACTGGTG', 'AAGATTGGCGGAACGT' ... ]] #>                                                                                #> ENSMUSG00000025902 . . . . . . . . . . . . . . . . . 2 1 . . . . . . 1 . . . . #> ENSMUSG00000096126 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . #> ENSMUSG00000033845 1 1 2 4 1 1 . . . . . 1 . . . . . 1 2 . 1 . . 2 2 1 3 . . . #> ENSMUSG00000025903 . . 1 . . . . . . . . . . . . . . . . . 1 . 1 1 . 1 2 3 . . #> ENSMUSG00000033813 . . . . . . . . . 1 . . . . . . . 2 . . . . 2 . 1 1 . . . . #> ENSMUSG00000002459 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . #>                                                                                #> ENSMUSG00000025902 . . . 1 . . . . . . . . . 1 . . . . . . . . . . . . . . . . #> ENSMUSG00000096126 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . #> ENSMUSG00000033845 . . . 2 . . 1 . 1 . . 2 . 1 . . 1 . 1 1 . . 1 1 1 . . 1 . . #> ENSMUSG00000025903 1 . . 1 . 1 . . 2 . . 1 1 . . . . . . . 1 . . 1 1 3 . . . . #> ENSMUSG00000033813 . . . . 1 . . . . . . . . . . 1 . . 1 1 1 . . . . 1 . . . . #> ENSMUSG00000002459 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . #>                                                      #> ENSMUSG00000025902 . . . 1 . . 2 1 . . . . . . . . . #> ENSMUSG00000096126 . . . . . . . . . . . . . . . . . #> ENSMUSG00000033845 . . . 3 . . 1 . . . . . 2 2 . . . #> ENSMUSG00000025903 . . . . . . . . . . . . . . . . . #> ENSMUSG00000033813 . . . . . . . . . . . . . 1 . . . #> ENSMUSG00000002459 . . . . . . . . . . . . . . . . . # Setter counts(sfe) <- m colData(sfe) #> DataFrame with 77 rows and 12 columns #>                           barcode       col       row         x         y #>                       <character> <integer> <integer> <integer> <integer> #> AAATTACCTATCGATG AAATTACCTATCGATG        94        26      9525     41335 #> AACATATCAACTGGTG AACATATCAACTGGTG        99        27      9775     41422 #> AAGATTGGCGGAACGT AAGATTGGCGGAACGT        90        26      9325     41335 #> AAGGGACAGATTCTGT AAGGGACAGATTCTGT        92        26      9425     41335 #> AATATCGAGGGTTCTC AATATCGAGGGTTCTC       101        27      9875     41422 #> ...                           ...       ...       ...       ...       ... #> TTAGCTAATACGATCT TTAGCTAATACGATCT        98        22      9725     40987 #> TTCCAATCAGAGCTAG TTCCAATCAGAGCTAG        95        23      9575     41074 #> TTCCGCAGAGAAATAT TTCCGCAGAGAAATAT       101        21      9875     40900 #> TTCTTTGGTCGCGACG TTCTTTGGTCGCGACG       104        24     10025     41161 #> TTGATGTGTAGTCCCG TTGATGTGTAGTCCCG        90        24      9325     41161 #>                        dia    tissue   sample_id   nCounts    nGenes prop_mito #>                  <numeric> <logical> <character> <numeric> <integer> <numeric> #> AAATTACCTATCGATG   180.278      TRUE       Vis5A     13229      2146  0.345680 #> AACATATCAACTGGTG   180.278      TRUE       Vis5A     10197      1782  0.411297 #> AAGATTGGCGGAACGT   180.278      TRUE       Vis5A      9597      1769  0.383036 #> AAGGGACAGATTCTGT   180.278      TRUE       Vis5A     15855      2355  0.383728 #> AATATCGAGGGTTCTC   180.278      TRUE       Vis5A     10327      1683  0.521061 #> ...                    ...       ...         ...       ...       ...       ... #> TTAGCTAATACGATCT   180.278      TRUE       Vis5A      1736       625  0.311060 #> TTCCAATCAGAGCTAG   180.278      TRUE       Vis5A     13706      2696  0.338903 #> TTCCGCAGAGAAATAT   180.278        NA       Vis5A       115        73  0.304348 #> TTCTTTGGTCGCGACG   180.278        NA       Vis5A        96        56  0.437500 #> TTGATGTGTAGTCCCG   180.278      TRUE       Vis5A      9948      1808  0.458786 #>                  in_tissue #>                  <logical> #> AAATTACCTATCGATG      TRUE #> AACATATCAACTGGTG      TRUE #> AAGATTGGCGGAACGT      TRUE #> AAGGGACAGATTCTGT      TRUE #> AATATCGAGGGTTCTC      TRUE #> ...                    ... #> TTAGCTAATACGATCT      TRUE #> TTCCAATCAGAGCTAG      TRUE #> TTCCGCAGAGAAATAT     FALSE #> TTCTTTGGTCGCGACG     FALSE #> TTGATGTGTAGTCCCG      TRUE rowData(sfe) #> DataFrame with 15123 rows and 6 columns #>                               Ensembl      symbol            type       means #>                           <character> <character>     <character>   <numeric> #> ENSMUSG00000025902 ENSMUSG00000025902       Sox17 Gene Expression 0.007612179 #> ENSMUSG00000096126 ENSMUSG00000096126     Gm22307 Gene Expression 0.000200321 #> ENSMUSG00000033845 ENSMUSG00000033845      Mrpl15 Gene Expression 0.075921474 #> ENSMUSG00000025903 ENSMUSG00000025903      Lypla1 Gene Expression 0.057491987 #> ENSMUSG00000033813 ENSMUSG00000033813       Tcea1 Gene Expression 0.052283654 #> ...                               ...         ...             ...         ... #> ENSMUSG00000064360 ENSMUSG00000064360      mt-Nd3 Gene Expression  11.3030849 #> ENSMUSG00000064363 ENSMUSG00000064363      mt-Nd4 Gene Expression  24.8173077 #> ENSMUSG00000064367 ENSMUSG00000064367      mt-Nd5 Gene Expression   2.9625401 #> ENSMUSG00000064368 ENSMUSG00000064368      mt-Nd6 Gene Expression   0.0240385 #> ENSMUSG00000064370 ENSMUSG00000064370     mt-Cytb Gene Expression  24.2099359 #>                           vars       cv2 #>                      <numeric> <numeric> #> ENSMUSG00000025902 0.008757912  151.1411 #> ENSMUSG00000096126 0.000200321 4992.0000 #> ENSMUSG00000033845 0.114250804   19.8212 #> ENSMUSG00000025903 0.080645121   24.3985 #> ENSMUSG00000033813 0.073603279   26.9256 #> ...                        ...       ... #> ENSMUSG00000064360 9.35532e+02   7.32259 #> ENSMUSG00000064363 5.00034e+03   8.11877 #> ENSMUSG00000064367 7.59503e+01   8.65369 #> ENSMUSG00000064368 2.98769e-02  51.70369 #> ENSMUSG00000064370 4.96740e+03   8.47505 sfe_tissue <- sfe[, sfe$in_tissue] sfe_tissue <- sfe_tissue[rowSums(counts(sfe_tissue)) > 0,] sfe_tissue <- logNormCounts(sfe_tissue) # Log counts getter logcounts(sfe_tissue) |> head() #> 6 x 57 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 57 column names 'AAATTACCTATCGATG', 'AACATATCAACTGGTG', 'AAGATTGGCGGAACGT' ... ]] #>                                                                            #> ENSMUSG00000025902 .         .        .        .         .       .         #> ENSMUSG00000033845 0.9120341 1.100212 1.778525 1.9791690 1.09049 0.7212191 #> ENSMUSG00000025903 .         .        1.147552 .         .       .         #> ENSMUSG00000033813 .         .        .        .         .       .         #> ENSMUSG00000033793 .         .        .        .         1.09049 0.7212191 #> ENSMUSG00000025907 0.9120341 1.100212 .        0.7954883 .       1.1998445 #>                                                                           #> ENSMUSG00000025902 .         .         .        . . 1.4235808 0.9221123 . #> ENSMUSG00000033845 .         .         1.187124 . . 0.8806874 1.4801489 . #> ENSMUSG00000025903 .         .         .        . . .         .         . #> ENSMUSG00000033813 .         0.7819597 .        . . 1.4235808 .         . #> ENSMUSG00000033793 .         .         .        . . .         .         . #> ENSMUSG00000025907 0.9664523 .         .        . . 0.8806874 0.9221123 . #>                                                                              #> ENSMUSG00000025902 .         .         .         .        0.7434199 .        #> ENSMUSG00000033845 0.7597265 .         1.5084926 1.626531 0.7434199 1.756849 #> ENSMUSG00000025903 0.7597265 0.8244546 0.9430309 .        0.7434199 1.370942 #> ENSMUSG00000033813 .         1.3458113 .         1.031288 0.7434199 .        #> ENSMUSG00000033793 .         .         0.9430309 .        .         .        #> ENSMUSG00000025907 0.7597265 0.8244546 .         1.031288 0.7434199 1.370942 #>                                                                             #> ENSMUSG00000025902 .        . .        .         0.8901568 .        .       #> ENSMUSG00000033845 .        . .        .         1.4365644 .        .       #> ENSMUSG00000025903 2.255916 . 1.284466 .         0.8901568 .        1.79022 #> ENSMUSG00000033813 .        . .        .         .         1.616818 .       #> ENSMUSG00000033793 .        . .        .         .         .        .       #> ENSMUSG00000025907 1.175551 . 1.953018 0.9455567 0.8901568 .        .       #>                                                                                #> ENSMUSG00000025902 .         .        .         . .         .         1.755744 #> ENSMUSG00000033845 0.8038305 .        0.7911927 . 1.3328186 .         1.755744 #> ENSMUSG00000025903 .         .        1.2992499 . 0.8151422 0.8999878 .        #> ENSMUSG00000033813 .         .        .         . .         .         .        #> ENSMUSG00000033793 .         .        .         . .         .         .        #> ENSMUSG00000025907 2.2414286 1.093611 0.7911927 . .         .         .        #>                                                                           #> ENSMUSG00000025902 .    .        . .         .         .         .        #> ENSMUSG00000033845 .    1.452596 . 0.7671356 0.8750204 .         1.711303 #> ENSMUSG00000025903 .    .        . .         .         0.8493164 .        #> ENSMUSG00000033813 1.08 .        . 0.7671356 0.8750204 0.8493164 .        #> ENSMUSG00000033793 1.08 .        . .         .         .         .        #> ENSMUSG00000025907 .    .        . .         0.8750204 .         1.711303 #>                                                                                #> ENSMUSG00000025902 .        .         .         .         .         .        . #> ENSMUSG00000033845 1.158464 0.8717957 .         .         0.6711848 .        . #> ENSMUSG00000025903 1.158464 0.8717957 1.7921684 .         .         .        . #> ENSMUSG00000033813 .        .         0.8648235 .         .         .        . #> ENSMUSG00000033793 .        .         .         .         .         .        . #> ENSMUSG00000025907 .        .         2.0991159 0.8960287 0.6711848 2.119829 . #>                                                                                 #> ENSMUSG00000025902 0.9283765 . 1.4077190 1.35168 .         . .        .         #> ENSMUSG00000033845 1.8911857 . 0.8691502 .       .         . 3.851774 1.4340401 #> ENSMUSG00000025903 .         . .         .       .         . .        .         #> ENSMUSG00000033813 .         . .         .       .         . .        0.8883139 #> ENSMUSG00000033793 .         . .         .       .         . .        0.8883139 #> ENSMUSG00000025907 .         . 1.4077190 1.35168 0.8601784 . .        1.4340401 #>                             #> ENSMUSG00000025902 .        #> ENSMUSG00000033845 .        #> ENSMUSG00000025903 .        #> ENSMUSG00000033813 .        #> ENSMUSG00000033793 .        #> ENSMUSG00000025907 1.119352 # Highly variable genes dec <- modelGeneVar(sfe_tissue) hvgs <- getTopHVGs(dec, n = 1000) sfe_tissue <- runPCA(sfe_tissue, ncomponents = 10, subset_row = hvgs,                      exprs_values = \"logcounts\", scale = TRUE) pca_res <- reducedDim(sfe_tissue, \"PCA\") head(pca_res) #>                         PC1        PC2         PC3        PC4        PC5 #> AAATTACCTATCGATG  1.3377315 -0.6272455 -1.89418096 -0.4281142  1.6679033 #> AACATATCAACTGGTG  0.9176196 -1.7446527 -1.17466111 -0.1101124 -0.8328961 #> AAGATTGGCGGAACGT -0.3127939 -2.3381292  1.55334449  2.0582206  3.1237670 #> AAGGGACAGATTCTGT  1.1454887 -1.6483366 -1.34405438 -0.6489710  2.0769778 #> AATATCGAGGGTTCTC  1.6871434 -1.3772805 -2.99001101 -0.7206788  1.4824973 #> AATGATGATACGCTAT  0.9398691 -0.3118155  0.02960312  0.7916621  0.9375853 #>                         PC6       PC7        PC8        PC9       PC10 #> AAATTACCTATCGATG -1.7815613 0.3881873 -2.8266465  4.1393556  1.5509855 #> AACATATCAACTGGTG  0.3579236 3.1559300 -0.2434049  0.5127298  0.3363097 #> AAGATTGGCGGAACGT -3.9268637 2.4060020 -1.2217007  3.1234996 -1.3912454 #> AAGGGACAGATTCTGT -0.5549159 2.4213310 -1.5162314  0.6479754  0.6833253 #> AATATCGAGGGTTCTC -0.3287834 6.1201618  5.0054816 -4.9051787 -3.9949746 #> AATGATGATACGCTAT  0.7241128 1.7345248  1.0288884 -1.2416471  1.3317063 reducedDim(sfe_tissue) |> head() #>                         PC1        PC2         PC3        PC4        PC5 #> AAATTACCTATCGATG  1.3377315 -0.6272455 -1.89418096 -0.4281142  1.6679033 #> AACATATCAACTGGTG  0.9176196 -1.7446527 -1.17466111 -0.1101124 -0.8328961 #> AAGATTGGCGGAACGT -0.3127939 -2.3381292  1.55334449  2.0582206  3.1237670 #> AAGGGACAGATTCTGT  1.1454887 -1.6483366 -1.34405438 -0.6489710  2.0769778 #> AATATCGAGGGTTCTC  1.6871434 -1.3772805 -2.99001101 -0.7206788  1.4824973 #> AATGATGATACGCTAT  0.9398691 -0.3118155  0.02960312  0.7916621  0.9375853 #>                         PC6       PC7        PC8        PC9       PC10 #> AAATTACCTATCGATG -1.7815613 0.3881873 -2.8266465  4.1393556  1.5509855 #> AACATATCAACTGGTG  0.3579236 3.1559300 -0.2434049  0.5127298  0.3363097 #> AAGATTGGCGGAACGT -3.9268637 2.4060020 -1.2217007  3.1234996 -1.3912454 #> AAGGGACAGATTCTGT -0.5549159 2.4213310 -1.5162314  0.6479754  0.6833253 #> AATATCGAGGGTTCTC -0.3287834 6.1201618  5.0054816 -4.9051787 -3.9949746 #> AATGATGATACGCTAT  0.7241128 1.7345248  1.0288884 -1.2416471  1.3317063 # Set PCA embeddings say if you ran PCA elsewhere reducedDim(sfe_tissue, \"PCA\") <- pca_res reducedDimNames(sfe_tissue) #> [1] \"PCA\""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"column-geometries","dir":"Articles","previous_headings":"Non-spatial operations of SFE objects","what":"Column geometries","title":"SpatialFeatureExperiment","text":"Column geometries colGeometries geometries correspond columns gene count matrix, Visium spots cells datasets single cell resolution technology. SFE object can multiple column geometries. example, dataset single cell resolution, whole cell segmentation nuclei segmentation two different colGeometries. However, Visium, spot polygons colGeometry obviously relevant, though users can add geometries results geometric operations spot polygons. different geometries can get set names, “spotPoly” standard name Visium spot polygons. get sf data frame, just like regular data frame special geometry column. Now plot spot polygons  see colGeometries present SFE object: shorthands specific column row geometries. example, spotPoly(sfe) equivalent colGeometry(sfe, \"spotPoly\") shown . Exercise: cellSeg function gets cell segmentation MERFISH dataset sfe_vizgen. Get plot cell segmentations.","code":"# Get Visium spot polygons (spots <- colGeometry(sfe_tissue, \"spotPoly\")) #> Simple feature collection with 57 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5000 ymin: 13000 xmax: 7000 ymax: 14931.74 #> CRS:           NA #> First 10 features: #>                                        geometry sample_id #> AAATTACCTATCGATG POLYGON ((6472.186 13875.23...     Vis5A #> AACATATCAACTGGTG POLYGON ((5778.291 13635.43...     Vis5A #> AAGATTGGCGGAACGT POLYGON ((7000 13809.84, 69...     Vis5A #> AAGGGACAGATTCTGT POLYGON ((6749.535 13874.64...     Vis5A #> AATATCGAGGGTTCTC POLYGON ((5500.941 13636.03...     Vis5A #> AATGATGATACGCTAT POLYGON ((6612.42 14598.82,...     Vis5A #> AATTCATAAGGGATCT POLYGON ((6889.769 14598.22...     Vis5A #> ACGCTAGTGATACACT POLYGON ((5639.096 13394.44...     Vis5A #> AGCGCGGGTGCCAATG POLYGON ((6750.575 14357.23...     Vis5A #> AGTGAGCCTCGCCGCC POLYGON ((5222.552 13154.04...     Vis5A ggplot(spots) + geom_sf() # Set colGeometry colGeometry(sfe_tissue, \"spotPoly\") <- spots colGeometryNames(sfe_tissue) #> [1] \"spotPoly\" # Getter (spots <- spotPoly(sfe_tissue)) #> Simple feature collection with 57 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5000 ymin: 13000 xmax: 7000 ymax: 14931.74 #> CRS:           NA #> First 10 features: #>                                        geometry sample_id #> AAATTACCTATCGATG POLYGON ((6472.186 13875.23...     Vis5A #> AACATATCAACTGGTG POLYGON ((5778.291 13635.43...     Vis5A #> AAGATTGGCGGAACGT POLYGON ((7000 13809.84, 69...     Vis5A #> AAGGGACAGATTCTGT POLYGON ((6749.535 13874.64...     Vis5A #> AATATCGAGGGTTCTC POLYGON ((5500.941 13636.03...     Vis5A #> AATGATGATACGCTAT POLYGON ((6612.42 14598.82,...     Vis5A #> AATTCATAAGGGATCT POLYGON ((6889.769 14598.22...     Vis5A #> ACGCTAGTGATACACT POLYGON ((5639.096 13394.44...     Vis5A #> AGCGCGGGTGCCAATG POLYGON ((6750.575 14357.23...     Vis5A #> AGTGAGCCTCGCCGCC POLYGON ((5222.552 13154.04...     Vis5A # Setter spotPoly(sfe_tissue) <- spots"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"annotation","dir":"Articles","previous_headings":"Non-spatial operations of SFE objects","what":"Annotation","title":"SpatialFeatureExperiment","text":"Annotation geometries can get set annotGeometry(). column row geometries, number rows sf data frame (.e. number geometries data frame) constrained number rows columns gene count matrix respectively, just like rowData colData, row rowGeometry colGeometry sf data frame must correspond row column gene count matrix respectively. contrast, annotGeometry sf data frame can dimension, constrained dimension gene count matrix.  See annotGeometries present SFE object: shorthands specific annotation geometries. example, tissueBoundary(sfe) equivalent annotGeometry(sfe, \"tissueBoundary\"). cellSeg() (cell segmentation) nucSeg() (nuclei segmentation) first query colGeometries (single cell, single molecule technologies, equivalent colGeometry(sfe, \"cellSeg\") colGeometry(sfe, \"nucSeg\")), found, query annotGeometries (array capture microdissection technologies, equivalent annotGeometry(sfe, \"cellSeg\") annotGeometry(sfe, \"nucSeg\")).","code":"# Getter, by name or index (tb <- annotGeometry(sfe_tissue, \"tissueBoundary\")) #> Simple feature collection with 1 feature and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5094 ymin: 13000 xmax: 7000 ymax: 14969 #> CRS:           NA #>   ID                       geometry sample_id #> 7  7 POLYGON ((5094 13000, 5095 ...     Vis5A ggplot(tb) + geom_sf() # Setter, by name or index annotGeometry(sfe_tissue, \"tissueBoundary\") <- tb annotGeometryNames(sfe_tissue) #> [1] \"tissueBoundary\"      \"myofiber_full\"       \"myofiber_simplified\" #> [4] \"nuclei\"              \"nuclei_centroid\" # Getter (tb <- tissueBoundary(sfe_tissue)) #> Simple feature collection with 1 feature and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5094 ymin: 13000 xmax: 7000 ymax: 14969 #> CRS:           NA #>   ID                       geometry sample_id #> 7  7 POLYGON ((5094 13000, 5095 ...     Vis5A # Setter tissueBoundary(sfe_tissue) <- tb"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"spatial-graphs","dir":"Articles","previous_headings":"Non-spatial operations of SFE objects","what":"Spatial graphs","title":"SpatialFeatureExperiment","text":"spatial neighborhood graphs Visium spots stored colGraphs field, similar user interface colGeometries. SFE also wraps methods find spatial neighborhood graph implemented spdep package, triangulation used demonstration.  Visium, spatial neighborhood graph hexagonal grid can found known locations barcodes. One SFE object can multiple colGraphs.  graphs present SFE object? workshop works one sample, .e. tissue section, operations multiple samples discussed vignette SFE package.","code":"(g <- findSpatialNeighbors(sfe_tissue, MARGIN = 2, method = \"tri2nb\")) #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 57  #> Number of nonzero links: 314  #> Percentage nonzero weights: 9.664512  #> Average number of links: 5.508772  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 57 3249 57 20.93315 229.9213 plot(g, coords = spatialCoords(sfe_tissue)) # Set graph by name colGraph(sfe_tissue, \"graph1\") <- g # Get graph by name (g <- colGraph(sfe_tissue, \"graph1\")) #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 57  #> Number of nonzero links: 314  #> Percentage nonzero weights: 9.664512  #> Average number of links: 5.508772  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 57 3249 57 20.93315 229.9213 colGraph(sfe_tissue, \"visium\") <- findVisiumGraph(sfe_tissue) plot(colGraph(sfe_tissue, \"visium\"), coords = spatialCoords(sfe_tissue)) colGraphNames(sfe_tissue) #> [1] \"graph1\" \"visium\""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"row-geometries","dir":"Articles","previous_headings":"Non-spatial operations of SFE objects","what":"Row geometries","title":"SpatialFeatureExperiment","text":"Visium dataset geometries associated genes, MERFISH dataset . rowGeometry getter setter pretty much user interface getters setters covered : case transcript spots, ’s special convenience function txSpots Plot transcript spots (toy dataset, subsampled keep SFE package small; usually much denser)","code":"(rg <- rowGeometry(sfe_vizgen, \"txSpots\")) #> Simple feature collection with 62 features and 4 fields #> Geometry type: MULTIPOINT #> Dimension:     XY #> Bounding box:  xmin: 6500.184 ymin: -1499.778 xmax: 6799.719 ymax: -1200.041 #> CRS:           NA #> First 10 features: #>          gene barcode_id global_z   transcript_id #> CD4       CD4          0        3 ENST00000011653 #> TLL1     TLL1          1        3 ENST00000061240 #> EPHA8   EPHA8          2        3 ENST00000166244 #> CDKN1A CDKN1A          4        3 ENST00000244741 #> PDGFRA PDGFRA          6        3 ENST00000257290 #> CD44     CD44          7        3 ENST00000263398 #> FCGR2A FCGR2A          8        3 ENST00000271450 #> EGFR     EGFR          9        3 ENST00000275493 #> DRAXIN DRAXIN         11        3 ENST00000294485 #> LMX1A   LMX1A         12        3 ENST00000294816 #>                              geometry #> CD4    MULTIPOINT ((6770.52 -1466.... #> TLL1   MULTIPOINT ((6692.258 -1435... #> EPHA8  MULTIPOINT ((6531.73 -1427.... #> CDKN1A MULTIPOINT ((6774.421 -1477... #> PDGFRA MULTIPOINT ((6642.847 -1355... #> CD44   MULTIPOINT ((6530.448 -1449... #> FCGR2A MULTIPOINT ((6589.974 -1481... #> EGFR   MULTIPOINT ((6655.547 -1419... #> DRAXIN MULTIPOINT ((6708.042 -1317... #> LMX1A  MULTIPOINT ((6797.345 -1240... # Setter rowGeometry(sfe_vizgen, \"txSpots\") <- rg txSpots(sfe_vizgen) #> Simple feature collection with 62 features and 4 fields #> Geometry type: MULTIPOINT #> Dimension:     XY #> Bounding box:  xmin: 6500.184 ymin: -1499.778 xmax: 6799.719 ymax: -1200.041 #> CRS:           NA #> First 10 features: #>          gene barcode_id global_z   transcript_id #> CD4       CD4          0        3 ENST00000011653 #> TLL1     TLL1          1        3 ENST00000061240 #> EPHA8   EPHA8          2        3 ENST00000166244 #> CDKN1A CDKN1A          4        3 ENST00000244741 #> PDGFRA PDGFRA          6        3 ENST00000257290 #> CD44     CD44          7        3 ENST00000263398 #> FCGR2A FCGR2A          8        3 ENST00000271450 #> EGFR     EGFR          9        3 ENST00000275493 #> DRAXIN DRAXIN         11        3 ENST00000294485 #> LMX1A   LMX1A         12        3 ENST00000294816 #>                              geometry #> CD4    MULTIPOINT ((6770.52 -1466.... #> TLL1   MULTIPOINT ((6692.258 -1435... #> EPHA8  MULTIPOINT ((6531.73 -1427.... #> CDKN1A MULTIPOINT ((6774.421 -1477... #> PDGFRA MULTIPOINT ((6642.847 -1355... #> CD44   MULTIPOINT ((6530.448 -1449... #> FCGR2A MULTIPOINT ((6589.974 -1481... #> EGFR   MULTIPOINT ((6655.547 -1419... #> DRAXIN MULTIPOINT ((6708.042 -1317... #> LMX1A  MULTIPOINT ((6797.345 -1240... ggplot() +      geom_sf(data = cellSeg(sfe_vizgen)) +     geom_sf(data = rg, size = 0.5)"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"images","dir":"Articles","previous_headings":"Non-spatial operations of SFE objects","what":"Images","title":"SpatialFeatureExperiment","text":"SPE, images used visualization, SFE extended SPE image functionality large images don’t loaded memory unless necessary. SFE, 3 types images: SpatRasterImage, default, thin wrapper around SpatRaster class terra object make conform SPE’s requirements. Large images loaded memory unless necessary ’s possible load sampled lower resolution version image memory. Spatial extent part SpatRaster. extent important delineate image coordinate system within tissue section. sophisticated way make sure image aligned geometries scale factor SPE works Visium allow SPE object cropped. BioFormatsImage used OME-TIFF images whose compression can’t read terra. image loaded memory. ’s just metadata, includes file path, extent, origin (minimum value coordinates). far functions related BioFormatsImage cater Xenium data. EBImage thin wrapper around Image class EBImage package conform SPE’s requirements. EBImage, one can thresholding morphological operations. However, ’s merely wrapper; contains another metadata field extent. BioFormatsImage loaded memory, becomes EBImage. MERFISH dataset , image represented SpatRasterImage. Get images getImg function, use image_id function indicate image get, ’s left blank, first imaget retrieved: Use th ext function get extent image SpatRasterImage thin wrapper; use imgRaster get image :  advantage SpatRasterImage one can use vector geometries sf data frames extract data raster image. binary mask, terra package can convert mask polygons vice versa. disadvantages, terra built geography ’s difficult perform affine transforms image (including rotation); geography transformation performed reprojecting map standards projections Mercator Robinson projections world map. SpatRasterImage rotated, ’s converted EBImage, can converted back SpatRasterImage. BioFormatsImage can also converted SpatRasterImage though goes EBImage. Also, one perform image processing morphological operations, watershed segmentation, can performed EBImage. convert image EBImage, plot EBImage package  Finally, can call Voyager function plot image, cell segmentation, transcript spots together:  BTW, reason transcript spots assigned cells stored rowGeometries MULTIPOINT transcript spots segmented cells shown plot. However, doesn’t mean irrelevant. Also, plot shows transcript spots genes dataset ’re sampled. hackathon, may choose work issue add rowGeometries plotSpatialFeature function add argument specify gene(s) plot. Typically small number genes plotted time, otherwise points crowded see using colors distinguish genes, colors difficult distinguish. suggest using point shape distinguish genes colors already used cell data. Turn code chunk function ’ll call several times though MERFISH dataset","code":"(img <- getImg(sfe_vizgen, image_id = \"DAPI_z3\")) #> 1 x 695 x 695 (width x height) SpatRasterImage #> imgSource(): #>   /__w/VoyagerHackathon/VoyagerHackathon/vignettes/vizgen_cellbound/images/mosaic_ #>   DAPI_z3.tif ext(img) #>      xmin      xmax      ymin      ymax  #>  6499.909  6800.141 -1500.166 -1199.939 plot(imgRaster(img), col = viridis_pal()(50)) ebi <- toEBImage(img) display(imgRaster(ebi) |> normalize(), method = \"raster\") plotSpatialFeature(sfe_vizgen, features = \"volume\", colGeometryName = \"cellSeg\",                    image_id = \"DAPI_z3\", dark = TRUE) +     geom_sf(data = rg, size = 0.1, color = \"white\") plot_sfe_vizgen <- function(sfe) {     plotSpatialFeature(sfe, features = \"volume\", colGeometryName = \"cellSeg\",                    image_id = \"DAPI_z3\", dark = TRUE) +     geom_sf(data = txSpots(sfe), size = 0.1, color = \"white\") }"},{"path":[]},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"bounding-box","dir":"Articles","previous_headings":"Spatial operations","what":"Bounding box","title":"SpatialFeatureExperiment","text":"bounding box geometry smallest rectangle contains geometry, get minimum maximum x coordinates y coordinates. can find bounding box individual sf data frames st_bbox sf package However, SFE object, multiple geometries, cell centroids, cell segmentation, nucleus segmentation, tissue boundary, transcript spots, , images. bbox function SFE aggregates bounding boxes geometries (optionally images) get overall bounding box SFE object:","code":"st_bbox(rg) #>      xmin      ymin      xmax      ymax  #>  6500.184 -1499.778  6799.719 -1200.041 bbox(sfe_vizgen) #>      xmin      ymin      xmax      ymax  #>  6498.553 -1502.179  6800.404 -1199.928 # In this case the image is not larger than the geometries bbox(sfe_vizgen, include_image = TRUE) #>      xmin      ymin      xmax      ymax  #>  6498.553 -1502.179  6800.404 -1199.928"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"cropping","dir":"Articles","previous_headings":"Spatial operations","what":"Cropping","title":"SpatialFeatureExperiment","text":"can think SFE object stack maps aligned, like National Map layers satellite images, land use, administrative boundaries, watersheds, rock formations, faults, etc. Cropping crop maps. One can crop either bounding box polygon shape. colGeometryName argument specifies colGeometry decide cell keep cropping. Using centroid different using cell polygon since polygon can slightly overlap bounding box centroid outside.  Don’t like tiny slivers cells boundary bounding box? can also keep cell intersects bounding box larger datasets, much faster finding actual intersection geometries. keep_whole argument makes sure cells kept whole; “col” can also “annot” keep annotGeometry items (e.g. cell segmentation Visium datasets) whole.  original bounding box shown red cells partially overlap cropped. can also keep cells covered (.e. entirely within) bounding box  can also use geometry remove part data specifying op = st_difference; keep_whole cover still apply.","code":"bbox_use <- c(xmin = 6550, xmax = 6650, ymin = -1350, ymax = -1250) sfe_cropped <- crop(sfe_vizgen, bbox_use, colGeometryName = \"cellSeg\") bbox(sfe_cropped) #>  xmin  ymin  xmax  ymax  #>  6550 -1350  6650 -1250 plot_sfe_vizgen(sfe_cropped) sfe_cropped2 <- crop(sfe_vizgen, bbox_use, colGeometryName = \"cellSeg\",                      keep_whole = \"col\") plot_sfe_vizgen(sfe_cropped2) +     geom_sf(data = st_as_sfc(st_bbox(bbox_use)), fill = NA, color = \"red\",              linewidth = 0.5) sfe_cropped3 <- crop(sfe_vizgen, bbox_use, colGeometryName = \"cellSeg\",                      keep_whole = \"col\", cover = TRUE) plot_sfe_vizgen(sfe_cropped3) sfe_hole <- crop(sfe_vizgen, bbox_use, colGeometryName = \"cellSeg\",                   op = st_difference) plot_sfe_vizgen(sfe_hole)"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"transformation","dir":"Articles","previous_headings":"Spatial operations","what":"Transformation","title":"SpatialFeatureExperiment","text":"can rotate (right now multiples 90 degrees), mirror, transpose, translate SFE object, ’s canonical orientation like brain sections data different orientation read . geometries images transformed keeping aligned.  Individual images can transformed say case doesn’t initially align geometries, though dataset, put image alignment","code":"sfe_mirror <- mirror(sfe_vizgen, direction = \"vertical\") plot_sfe_vizgen(sfe_mirror) sfe_img <- mirrorImg(sfe_vizgen, image_id = \"DAPI_z3\") plot_sfe_vizgen(sfe_img)"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"multiple-samples","dir":"Articles","previous_headings":"","what":"Multiple samples","title":"SpatialFeatureExperiment","text":"Thus far, example dataset used one sample. SpatialExperiment (SPE) object special column colData called sample_id, data multiple tissue sections can coexist SPE object joint dimension reduction clustering keeping spatial coordinates separate. ’s important keep spatial coordinates different tissue sections separate first, coordinates make sense within section, second, coordinates different sections can overlapping numeric values. SFE inherits SPE, geometries spatial graphs, sample_id even important. geometry graph getter setter functions sample_id argument, optional one sample present SFE object. argument mandatory multiple samples present, can character vector multiple samples “” samples. examples using getters setters multiple samples. Use sampleIDs function see names samples Sample IDs can also changed, changeSampleIDs() function, named vector whose names old names values new names. Basically, functions covered argument sample_id operation performed samples. set sample_id = \"\" perform samples.","code":"# Construct toy dataset with 2 samples sfe1 <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe2 <- McKellarMuscleData(dataset = \"small2\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache spotPoly(sfe2)$sample_id <- \"sample02\" (sfe_combined <- cbind(sfe1, sfe2)) #> class: SpatialFeatureExperiment  #> dim: 15123 149  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(149): AAATTACCTATCGATG AACATATCAACTGGTG ... TTCCTCGGACTAACCA #>   TTCTGACCGGGCTCAA #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> unit: full_res_image_pixels #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries: tissueBoundary (GEOMETRY), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A:  #> sample02: sampleIDs(sfe_combined) #> [1] \"Vis5A\"    \"sample02\" # Only get the geometries for the second sample (spots2 <- colGeometry(sfe_combined, \"spotPoly\", sample_id = \"sample02\")) #> Simple feature collection with 72 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 6000 ymin: 7025.865 xmax: 8000 ymax: 9000 #> CRS:           NA #> First 10 features: #>                  sample_id                       geometry #> AACACACGCTCGCCGC  sample02 POLYGON ((6597.869 7842.575... #> AACCGCTAAGGGATGC  sample02 POLYGON ((6724.811 9000, 67... #> AACGCTGTTGCTGAAA  sample02 POLYGON ((6457.635 7118.991... #> AACGGACGTACGTATA  sample02 POLYGON ((6737.064 8083.571... #> AATAGAATCTGTTTCA  sample02 POLYGON ((7570.153 8564.368... #> ACAAATCGCACCGAAT  sample02 POLYGON ((8000 7997.001, 79... #> ACAATTGTGTCTCTTT  sample02 POLYGON ((6043.169 7843.77,... #> ACAGGCTTGCCCGACT  sample02 POLYGON ((7428.88 7358.195,... #> ACCAGTGCGGGAGACG  sample02 POLYGON ((6460.753 8566.757... #> ACCCTCCCTTGCTATT  sample02 POLYGON ((7847.503 8563.771... # Only set the geometries for the second sample # Leaving geometries of the first sample intact colGeometry(sfe_combined, \"spotPoly\", sample_id = \"sample02\") <- spots2 # Set graph only for the second sample colGraph(sfe_combined, \"foo\", sample_id = \"sample02\") <-    findSpatialNeighbors(sfe_combined, sample_id = \"sample02\") # Get graph only for the second sample colGraph(sfe_combined, \"foo\", sample_id = \"sample02\") #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 72  #> Number of nonzero links: 406  #> Percentage nonzero weights: 7.83179  #> Average number of links: 5.638889  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 72 5184 72 25.82104 289.8299 # Set graph of the same name for both samples # The graphs are computed separately for each sample colGraphs(sfe_combined, sample_id = \"all\", name = \"visium\") <-    findVisiumGraph(sfe_combined, sample_id = \"all\") # Get multiple graphs of the same name colGraphs(sfe_combined, sample_id = \"all\", name = \"visium\") #> $Vis5A #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 77  #> Number of nonzero links: 394  #> Percentage nonzero weights: 6.645303  #> Average number of links: 5.116883  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 77 5929 77 31.68056 311.7544 #>  #> $sample02 #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 72  #> Number of nonzero links: 366  #> Percentage nonzero weights: 7.060185  #> Average number of links: 5.083333  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 72 5184 72 29.83889 291.5833 # Or just all graphs of the margin colGraphs(sfe_combined, sample_id = \"all\") #> $Vis5A #> $Vis5A$visium #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 77  #> Number of nonzero links: 394  #> Percentage nonzero weights: 6.645303  #> Average number of links: 5.116883  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 77 5929 77 31.68056 311.7544 #>  #>  #> $sample02 #> $sample02$foo #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 72  #> Number of nonzero links: 406  #> Percentage nonzero weights: 7.83179  #> Average number of links: 5.638889  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 72 5184 72 25.82104 289.8299 #>  #> $sample02$visium #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 72  #> Number of nonzero links: 366  #> Percentage nonzero weights: 7.060185  #> Average number of links: 5.083333  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 72 5184 72 29.83889 291.5833 sfe_combined <- changeSampleIDs(sfe_combined,                                  replacement = c(Vis5A = \"foo\", sample02 = \"bar\")) sfe_combined #> class: SpatialFeatureExperiment  #> dim: 15123 149  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(149): AAATTACCTATCGATG AACATATCAACTGGTG ... TTCCTCGGACTAACCA #>   TTCTGACCGGGCTCAA #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> unit: full_res_image_pixels #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries: tissueBoundary (GEOMETRY), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> foo: col: visium #> bar: col: foo, visium sampleIDs(sfe_combined) #> [1] \"foo\" \"bar\" bbox(sfe_combined, sample_id = \"all\") #>        foo  bar #> xmin  5000 6000 #> ymin 13000 7000 #> xmax  7000 8000 #> ymax 15000 9000 bbox(sfe_combined, sample_id = \"foo\") #>  xmin  ymin  xmax  ymax  #>  5000 13000  7000 15000"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"future-directions","dir":"Articles","previous_headings":"","what":"Future directions","title":"SpatialFeatureExperiment","text":"See GitHub issues","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/sfe.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"SpatialFeatureExperiment","text":"","code":"sessionInfo() #> R Under development (unstable) (2024-02-28 r85999) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] scales_1.3.0                   EBImage_4.45.0                 #>  [3] Voyager_1.5.0                  SFEData_1.5.0                  #>  [5] SpatialFeatureExperiment_1.5.2 scran_1.31.0                   #>  [7] scater_1.31.2                  scuttle_1.13.0                 #>  [9] SingleCellExperiment_1.25.0    SummarizedExperiment_1.33.3    #> [11] Biobase_2.63.0                 GenomicRanges_1.55.3           #> [13] GenomeInfoDb_1.39.6            IRanges_2.37.1                 #> [15] S4Vectors_0.41.3               BiocGenerics_0.49.1            #> [17] MatrixGenerics_1.15.0          matrixStats_1.2.0              #> [19] ggplot2_3.5.0                  terra_1.7-71                   #> [21] sf_1.0-15                      BiocStyle_2.31.0               #>  #> loaded via a namespace (and not attached): #>   [1] bitops_1.0-7              filelock_1.0.3            #>   [3] tibble_3.2.1              R.oo_1.26.0               #>   [5] lifecycle_1.0.4           edgeR_4.1.17              #>   [7] lattice_0.22-5            magrittr_2.0.3            #>   [9] limma_3.59.3              sass_0.4.8                #>  [11] rmarkdown_2.25            jquerylib_0.1.4           #>  [13] yaml_2.3.8                metapod_1.11.1            #>  [15] sp_2.1-3                  DBI_1.2.2                 #>  [17] abind_1.4-5               zlibbioc_1.49.0           #>  [19] purrr_1.0.2               R.utils_2.12.3            #>  [21] RCurl_1.98-1.14           rappdirs_0.3.3            #>  [23] GenomeInfoDbData_1.2.11   ggrepel_0.9.5             #>  [25] irlba_2.3.5.1             units_0.8-5               #>  [27] RSpectra_0.16-1           dqrng_0.3.2               #>  [29] pkgdown_2.0.7             DelayedMatrixStats_1.25.1 #>  [31] codetools_0.2-19          DropletUtils_1.23.0       #>  [33] DelayedArray_0.29.8       tidyselect_1.2.0          #>  [35] farver_2.1.1              ScaledMatrix_1.11.0       #>  [37] viridis_0.6.5             BiocFileCache_2.11.1      #>  [39] jsonlite_1.8.8            BiocNeighbors_1.21.2      #>  [41] e1071_1.7-14              systemfonts_1.0.5         #>  [43] ggnewscale_0.4.10         tools_4.4.0               #>  [45] ragg_1.2.7                sfarrow_0.4.1             #>  [47] Rcpp_1.0.12               glue_1.7.0                #>  [49] gridExtra_2.3             SparseArray_1.3.4         #>  [51] xfun_0.42                 dplyr_1.1.4               #>  [53] HDF5Array_1.31.6          withr_3.0.0               #>  [55] BiocManager_1.30.22       fastmap_1.1.1             #>  [57] boot_1.3-30               rhdf5filters_1.15.2       #>  [59] bluster_1.13.0            fansi_1.0.6               #>  [61] spData_2.3.0              digest_0.6.34             #>  [63] rsvd_1.0.5                mime_0.12                 #>  [65] R6_2.5.1                  textshaping_0.3.7         #>  [67] colorspace_2.1-0          wk_0.9.1                  #>  [69] jpeg_0.1-10               RSQLite_2.3.5             #>  [71] R.methodsS3_1.8.2         utf8_1.2.4                #>  [73] generics_0.1.3            data.table_1.15.2         #>  [75] class_7.3-22              httr_1.4.7                #>  [77] htmlwidgets_1.6.4         S4Arrays_1.3.4            #>  [79] spdep_1.3-3               pkgconfig_2.0.3           #>  [81] scico_1.5.0               gtable_0.3.4              #>  [83] blob_1.2.4                XVector_0.43.1            #>  [85] htmltools_0.5.7           bookdown_0.38             #>  [87] fftwtools_0.9-11          png_0.1-8                 #>  [89] SpatialExperiment_1.13.0  knitr_1.45                #>  [91] rjson_0.2.21              curl_5.2.1                #>  [93] proxy_0.4-27              cachem_1.0.8              #>  [95] rhdf5_2.47.4              stringr_1.5.1             #>  [97] BiocVersion_3.19.1        KernSmooth_2.23-22        #>  [99] parallel_4.4.0            vipor_0.4.7               #> [101] arrow_14.0.2.1            AnnotationDbi_1.65.2      #> [103] desc_1.4.3                s2_1.1.6                  #> [105] pillar_1.9.0              grid_4.4.0                #> [107] vctrs_0.6.5               BiocSingular_1.19.0       #> [109] dbplyr_2.4.0              beachmat_2.19.1           #> [111] sfheaders_0.4.4           cluster_2.1.6             #> [113] beeswarm_0.4.0            evaluate_0.23             #> [115] magick_2.8.3              cli_3.6.2                 #> [117] locfit_1.5-9.9            compiler_4.4.0            #> [119] rlang_1.1.3               crayon_1.5.2              #> [121] labeling_0.4.3            classInt_0.4-10           #> [123] fs_1.6.3                  ggbeeswarm_0.7.2          #> [125] stringi_1.8.3             viridisLite_0.4.2         #> [127] deldir_2.0-4              BiocParallel_1.37.0       #> [129] assertthat_0.2.1          Biostrings_2.71.2         #> [131] munsell_0.5.0             tiff_0.1-12               #> [133] Matrix_1.6-5              ExperimentHub_2.11.1      #> [135] patchwork_1.2.0           sparseMatrixStats_1.15.0  #> [137] bit64_4.0.5               Rhdf5lib_1.25.1           #> [139] KEGGREST_1.43.0           statmod_1.5.0             #> [141] highr_0.10                AnnotationHub_3.11.1      #> [143] igraph_2.0.2              memoise_2.0.1             #> [145] bslib_0.6.1               bit_4.0.5"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"x-visium","dir":"Articles","previous_headings":"","what":"10X Visium","title":"Exploratory spatial data analysis with Voyager","text":"Visium 10X Genomics currently popular spatial transcriptomics technology, workshop uses Visium dataset.  Visium, capture sequences spot barcode, unique molecule identifier (UMI), polyT capture poly-adenylated mRNAs printed hexagonal array glass slide. spot barcode known location, spots 55 \\(\\mu m\\) diameter 100 \\(\\mu m\\) apart center center. spots much larger types cells, Visium single cell resolution. Tissue mounted 4 capture areas slide, capture area 4992 spots. spots capture transcripts tissue, reverse transcribed, amplified, sequenced.  Space Ranger official software align sequencing reads genome quantify UMIs spot gene. Spatial Ranger also takes histology image capture area, determines spots tissue. user can also manually determine spots tissue Loupe Browser.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"dataset","dir":"Articles","previous_headings":"","what":"Dataset","title":"Exploratory spatial data analysis with Voyager","text":"dataset used vignette paper Large-scale integration single-cell transcriptomic data captures transitional progenitor states mouse skeletal muscle regeneration (McKellar et al. 2021). Notexin injected tibialis anterior muscle mice induce injury, healing muscle collected 2, 5, 7 days post injury Visium analysis. dataset vignette timepoint day 2. vignette starts SpatialFeatureExperiment (SFE) object. gene count matrix directly downloaded GEO. 4992 spots, whether tissue , included. H&E image used nuclei myofiber segmentation. subset nuclei randomly selected regions 3 timepoints manually annotated train StarDist model segment rest nuclei, myofibers manually segmented. tissue boundary found thresholding OpenCV, small polygons removed likely debris. Spot polygons constructed spot centroid coordinates diameter Space Ranger output. in_tissue column colData indicates spot polygons intersect tissue polygons, based st_intersects(). Tissue boundary, nuclei, myofiber, Visium spot polygons stored sf data frames SFE object. See vignette SpatialFeatureExperiment details structure SFE object. SFE object dataset provided SFEData package; begin downloading data loading R. H&E image section: image can added SFE object plotted behind geometries, needs flipped align spots origin top left image bottom left geometries.","code":"(sfe <- McKellarMuscleData(\"full\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> class: SpatialFeatureExperiment  #> dim: 15123 4992  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(4992): AAACAACGAATAGTTC AAACAAGTATCTCCCA ... TTGTTTGTATTACACG #>   TTGTTTGTGTAAATTC #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> unit: full_res_image_pixels #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries: tissueBoundary (POLYGON), myofiber_full (POLYGON), myofiber_simplified (POLYGON), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A: sfe <- addImg(sfe, imageSource = \"tissue_lowres_5a.jpeg\", sample_id = \"Vis5A\",                image_id = \"lowres\",                scale_fct = 1024/22208) sfe <- mirrorImg(sfe, sample_id = \"Vis5A\", image_id = \"lowres\")"},{"path":[]},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"spots-in-tissue","dir":"Articles","previous_headings":"Exploratory data analysis","what":"Spots in tissue","title":"Exploratory spatial data analysis with Voyager","text":"example dataset Visium spots whether tissue , spots intersect tissue used analyses. Total UMI counts (nCounts), number genes detected per spot (nGenes), proportion mitochondrially encoded counts (prop_mito) precomputed colData(sfe). plotSpatialFeature() function can used visualize various attributes space: expression gene, colData values, geometry attributes colGeometry annotGeometry. Visium spots plotted polygons reflecting actual size relative tissue, rather points, case packages plot Visium data. plotting geometries performed hood geom_sf. tissue boundary found thresholding H&E image removing small polygons likely debris. in_tissue column colData(sfe) indicates Visium spot polygon intersects tissue polygon; can found SpatialFeatureExperiment::annotPred(). demonstrate use scran (Lun, Bach, Marioni 2016) normalization , although note necessarily best approach normalizing spatial transcriptomics data. problem normalize spatial transcriptomics data non-trivial , nCounts plot space shows , spatial autocorrelation evident. Furthermore, Visium, reverse transcription occurs situ spots, PCR amplification occurs cDNA dissociated spots. Artifacts may subsequently introduced amplification step, associated spatial origin. Spatial artifacts may arise diffusion transcripts tissue permeablization. However, given total counts seem correspond histological regions, total counts may biological component hence treated technical artifact normalized away scRNA-seq data normalization methods. words, issue normalization spatial transcriptomics data, Visium particular, complex currently unsolved. Myofiber nuclei segmentation polygons available dataset annotGeometries field. Myofibers manually segmented, nuclei segmented StarDist trained manually segmented subset.","code":"names(colData(sfe)) #>  [1] \"barcode\"   \"col\"       \"row\"       \"x\"         \"y\"         \"dia\"       #>  [7] \"tissue\"    \"sample_id\" \"nCounts\"   \"nGenes\"    \"prop_mito\" \"in_tissue\" sfe_tissue <- sfe[,colData(sfe)$in_tissue] sfe_tissue <- sfe_tissue[rowSums(counts(sfe_tissue)) > 0,] #clusters <- quickCluster(sfe_tissue) #sfe_tissue <- computeSumFactors(sfe_tissue, clusters=clusters) #sfe_tissue <- sfe_tissue[, sizeFactors(sfe_tissue) > 0] sfe_tissue <- logNormCounts(sfe_tissue) annotGeometryNames(sfe_tissue) #> [1] \"tissueBoundary\"      \"myofiber_full\"       \"myofiber_simplified\" #> [4] \"nuclei\"              \"nuclei_centroid\""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"from-myofibers-and-nuclei-to-visium-spots","dir":"Articles","previous_headings":"Exploratory data analysis > Spots in tissue","what":"From myofibers and nuclei to Visium spots","title":"Exploratory spatial data analysis with Voyager","text":"plotSpatialFeature() function can also used plot attributes geometries, .e. non-geometry columns sf data frames rowGeometries, colGeometries, annotGeometries fields SFE object. myofiber polygons annotGeometries can plotted shown , colored cross section area observed tissue section. aes_use argument set color rather fill (default polygons) plot Visium spot outlines make myofiber polygons visible. fill argument set NA make Visium spots look hollow, size argument controls thickness outlines. annot_aes argument specifies column annotGeometry use specify values aesthstic, just like aes ggplot2 (aes_string precise, since tidyeval used ). annot_fixed argument (used ) can set fixed size, alpha, color, etc. annotGeometry.  larger myofibers seem fewer total counts, possibly larger size myofibers dilutes transcripts. hints need normalization procedure. SpatialFeatureExperiment, can find number myofibers nuclei intersect Visium spot. predicate can anything implemented sf, example, number nuclei fully covered Visium spot can also found. default predicate st_intersects().  one--one mapping Visium spots myofibers. However, can relate attributes myofibers gene expression detected Visium spots. One way summarize attributes myofibers intersect (choose another better predicate implemented sf) spot, calculate mean, median, sum. can done annotSummary() function SpatialFeatureExperiment. default predicate st_intersects(), default summary function mean().  reveals relationship mean area myofibers intersecting Visium spot aspects spots, total counts gene expression. NAs (gray) designate spots intersecting myofibers, e.g. inflammatory region. nGenes vs. nCounts plot standard QC plot scRNA-seq, see two mysterious branches two clusters nGenes vs. nCounts plot proportion mitochondrial counts vs. nCounts plot. two branches clusters seem related myofiber size.","code":"plotSpatialFeature(sfe_tissue, features = \"nCounts\",                     colGeometryName = \"spotPoly\",                    annotGeometryName = \"myofiber_simplified\",                     aes_use = \"color\", linewidth = 0.5, fill = NA,                    annot_aes = list(fill = \"area\")) colData(sfe_tissue)$n_myofibers <-    annotNPred(sfe_tissue, colGeometryName = \"spotPoly\",              annotGeometryName = \"myofiber_simplified\") plotSpatialFeature(sfe_tissue, features = \"n_myofibers\",                     colGeometryName = \"spotPoly\", image = \"lowres\", color = \"black\",                    linewidth = 0.1) colData(sfe_tissue)$mean_myofiber_area <-    annotSummary(sfe_tissue, \"spotPoly\", \"myofiber_simplified\",                 annotColNames = \"area\")[,1] # it always returns a data frame # The gray spots don't intersect any myofiber plotSpatialFeature(sfe_tissue, \"mean_myofiber_area\", \"spotPoly\", image = \"lowres\",                     color = \"black\", linewidth = 0.1) plotColData(sfe_tissue, x = \"nCounts\", y = \"nGenes\", colour_by = \"mean_myofiber_area\") plotColData(sfe_tissue, x = \"nCounts\", y = \"prop_mito\", colour_by = \"mean_myofiber_area\")"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"exercises","dir":"Articles","previous_headings":"","what":"Exploratory spatial data analysis with Voyager","title":"Exploratory spatial data analysis with Voyager","text":"Use annotNPred() function find number nuclei intersecting Visium spot. nuclei segmentation polygons annotGeometry called “nuclei”. Color Visium spots number nuclei. histological region tends nuclei per Visium spot? number nuclei per spot correlate nCounts?","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"plot-gene-expression-in-space","dir":"Articles","previous_headings":"Exploratory data analysis > Spots in tissue","what":"Plot gene expression in space","title":"Exploratory spatial data analysis with Voyager","text":"Marker genes: Myh7 (Type , slow twitch, aerobic), Myh2 (Type IIa, fast twitch, somewhat aerobic), Myh4 (Type IIb, fast twitch, anareobic), Myh1 (Type IIx, fast twitch, anaerobic), protocol (Wang, Yue, Kuang 2017) first examine Type myofibers. fast twitch muscle, don’t expect many slow twitch Type myofibers. Row names sfe_tissue Ensembl IDs order avoid ambiguity sometimes multiple Ensembl IDs gene symbol genes aliases. However, gene symbols shorter human readable Ensembl IDs, better suited display plots. plotSpatialFeature() function functions Voyager, even row names recorded Ensembl IDs, features argument can take gene symbols column rowData(sfe) gene symbols supplied swap_rownames argument. function Voyager queries genes swap_rownames argument.","code":"markers <- c(I = \"Myh7\", IIa = \"Myh2\", IIb = \"Myh4\", IIx = \"Myh1\") plotSpatialFeature(sfe_tissue, \"Myh2\", \"spotPoly\",                    annotGeometryName = \"myofiber_simplified\",                     annot_aes = list(fill = \"area\"), swap_rownames = \"symbol\",                     exprs_values = \"logcounts\", aes_use = \"color\", linewidth = 0.5,                    fill = NA)"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"exercises-1","dir":"Articles","previous_headings":"","what":"Exploratory spatial data analysis with Voyager","title":"Exploratory spatial data analysis with Voyager","text":"exprs_values argument specifies assay use, default “logcounts”, .e. log normalized data. default may may suitable practice given total UMI counts may biological relevance spatial data. Plot one marker genes , “counts” assay. Look documentation plotSpatialFeature(). Try plotting Visium spots filled circles partially transparent.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"spatial-neighborhood-graphs","dir":"Articles","previous_headings":"","what":"Spatial neighborhood graphs","title":"Exploratory spatial data analysis with Voyager","text":"spatial neighborhood graph required compute spatial dependency metrics Moran’s Geary’s C. SpatialFeatureExperiment package wraps methods spdep find spatial neighborhood graphs, stored within SFE object (see spdep documentation gabrielneigh(), knearneigh(), poly2nb(), tri2nb()). Voyager package uses graphs spatial dependency analyses, based spdep first version, methods geospatial packages, also use spatial neighborhood graphs, may added later. Visium, spots hexagonal grid, spatial neighborhood graph straightforward. However, spatial technologies single cell resolution, e.g. MERFISH, different methods can used find spatial neighborhood graph. example, method “poly2nb” used myofibers, identifies myofiber polygons physically touch . zero.policy = TRUE allow singletons, .e. nodes without neighbors graph; inflamed region, singletons. yet benchmarked spatial neighborhood construction methods determine “best” different technologies; particular method used demonstration purposes may best practice: plotColGraph() function plots graph space associated colGeometry, along geometry interest.  Similarly, plotAnnotGraph() function plots graph associated annotGeometry, along geometry interest.  plotRowGraph yet since haven’t worked dataset spatial graphs related genes relevant, although SFE object supports row graphs.","code":"colGraph(sfe_tissue, \"visium\") <- findVisiumGraph(sfe_tissue) annotGraph(sfe_tissue, \"myofiber_poly2nb\") <-    findSpatialNeighbors(sfe_tissue, type = \"myofiber_simplified\", MARGIN = 3,                        method = \"poly2nb\", zero.policy = TRUE) plotColGraph(sfe_tissue, colGraphName = \"visium\", colGeometryName = \"spotPoly\") +     theme_void() plotAnnotGraph(sfe_tissue, annotGraphName = \"myofiber_poly2nb\",                 annotGeometryName = \"myofiber_simplified\") + theme_void()"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"exploratory-spatial-data-analysis","dir":"Articles","previous_headings":"","what":"Exploratory spatial data analysis","title":"Exploratory spatial data analysis with Voyager","text":"spatial autocorrelation metrics package can computed directly vector matrix rather SFE object. user interface emulates dimension reductions scater package (e.g. calculateUMAP() takes matrix SCE object returns matrix, runUMAP() takes SCE object adds results reducedDims field SCE object). calculate* functions take matrix SFE object directly return results (format results depends structure results), run* functions take SFE object add results object. addition, colData* functions compute metrics numeric variables colData. colGeometry* functions compute metrics numeric columns colGeometry. annotGeometry* functions compute metrics numeric columns annotGeometry.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"univariate-global","dir":"Articles","previous_headings":"","what":"Univariate global","title":"Exploratory spatial data analysis with Voyager","text":"Voyager supports many univariate global spatial autocorrelation implemented spdep ESDA: Moran’s Geary’s C, permutation testing Moran’s Geary’s C, Moran plot, correlograms. addition, beyond spdep, Voyager can cluster Moran plots correlograms. Plotting functions taking SFE objects implemented plot results ggplot2 customization options spdep plotting functions. functions calculateUnivariate() (can take data outside SFE objects), runUnivariate() (gene expression), colDataUnivariate(), colGeometryUnivariate(), annotGeometryUnivariate(), reducedDimUnivariate() compute univariate spatial statistics different fields SFE object, arguments except arguments specific field SFE object. argument type, indicates corresponding function names spdep, determines spatial statistics computed. univariate global methods Voyager listed : calling calculate*variate() run*variate(), type (2nd) argument takes string matches entry name column data frame returned listSFEMethods(). demonstrate spatial autocorrelation gene expression, top highly variable genes (HVGs) used. HVGs found scran method. global statistic yields one result entire dataset.","code":"listSFEMethods(variate = \"uni\", scope = \"global\") #>              name                                           description #> 1           moran                                             Moran's I #> 2           geary                                             Geary's C #> 3        moran.mc                    Moran's I with permutation testing #> 4        geary.mc                    Geary's C with permutation testing #> 5    sp.mantel.mc Mantel-Hubert spatial general cross product statistic #> 6      moran.test                                        Moran's I test #> 7      geary.test                                        Geary's C test #> 8    globalG.test                                         Global G test #> 9  sp.correlogram                                           Correlogram #> 10      variogram                                  Variogram with model #> 11  variogram_map                                         Variogram map dec <- modelGeneVar(sfe_tissue) hvgs <- getTopHVGs(dec, n = 50)"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"morans-i","dir":"Articles","previous_headings":"Univariate global","what":"Moran’s I","title":"Exploratory spatial data analysis with Voyager","text":"reference, Pearson correlation defined \\[ \\rho_{X,Y} = \\frac{\\sum_{=1}^n\\sum_{j=1}^n (x_i - \\bar x)(y_i - \\bar y)}{\\sqrt{\\sum_{=1}^n (x_i - \\bar x)^2}\\sqrt{\\sum_{=1}^n (y_i - \\bar y)^2}}. \\] several ways quantify spatial autocorrelation, common Moran’s (Moran 1950): \\[ = \\frac{n}{\\sum_{=1}^n \\sum_{j=1}^n w_{ij}} \\frac{\\sum_{=1}^n \\sum_{j=1}^n w_{ij} (x_i - \\bar{x})(x_j - \\bar{x})}{\\sum_{=1}^n (x_i - \\bar{x})^2}, \\] \\(n\\) number spots locations, \\(\\) \\(j\\) different locations, spots Visium context, \\(x\\) \\(y\\) variables values location, \\(w_{ij}\\) spatial weight, can inversely proportional distance spots indicator whether two spots neighbors, subject various definitions neighborhood whether normalize number neighbors. spdep package uses neighborhood. Moran’s analogous Pearson correlation value location average value neighbors (identical, see (Lee 2001)). Just like Pearson correlation, Moran’s generally bound -1 1, positive value indicates positive spatial autocorrelation, .e. nearby values tend similar, negative value indicates negative spatial autocorrelation, .e. nearby values tend dissimilar. Upon visual inspection earlier workshop, total UMI counts per spot (nCounts) seem spatial autocorrelation. numeric columns colData(sfe), univariate methods can called colDataUnivariate(). compute Moran’s nCounts nGenes: colData, results added colFeatureData(sfe), features Moran’s calculated NA. column names featureData distinguishes different samples (’s one sample dataset), parsed plotting functions. first column Moran’s value, indicates moderate positive spatial autocorrelation nCounts nGenes. second column kurtosis data. Compute Moran’s attributes geometries: “area” area cross section myofiber seen tissue section “eccentricity” eccentricity ellipse fitted myofiber. non-geometry column colGeometry, colGeometryUnivariate() like annotGeometryUnivariate() , none colGeometries dataset extra columns. gene expression, logcounts assay used default (use exprs_values argument change assay), though may may best practice. metrics computed large number features, parallel computing supported, BiocParallel, BPPARAM argument. Moran’s commonly used, runMoransI(sfe_tissue, features = hvgs) equivalent runUnivariate(sfe_tissue, type = \"moran\", features = hvgs).","code":"sfe_tissue <- colDataUnivariate(sfe_tissue, type = \"moran\",                                  features = c(\"nCounts\", \"nGenes\"),                                 colGraphName = \"visium\") colFeatureData(sfe_tissue)[c(\"nCounts\", \"nGenes\"),] #> DataFrame with 2 rows and 2 columns #>         moran_Vis5A   K_Vis5A #>           <numeric> <numeric> #> nCounts    0.528705   3.00082 #> nGenes     0.384028   3.88036 # Remember zero.policy = TRUE since there're singletons sfe_tissue <- annotGeometryUnivariate(sfe_tissue, type = \"moran\",                                       features = c(\"area\", \"eccentricity\"),                                        annotGeometryName = \"myofiber_simplified\",                                       annotGraphName = \"myofiber_poly2nb\",                                        zero.policy = TRUE) attr(annotGeometry(sfe_tissue, \"myofiber_simplified\"), \"featureData\")[c(\"area\", \"eccentricity\"),] #> DataFrame with 2 rows and 2 columns #>              moran_Vis5A   K_Vis5A #>                <numeric> <numeric> #> area            0.327888   4.95675 #> eccentricity    0.110938   3.26913 sfe_tissue <- runUnivariate(sfe_tissue, type = \"moran\", features = hvgs,                              colGraphName = \"visium\", BPPARAM = SerialParam()) rowData(sfe_tissue)[head(hvgs),c(\"moran_Vis5A\", \"K_Vis5A\", \"symbol\")] #> DataFrame with 6 rows and 3 columns #>                    moran_Vis5A   K_Vis5A      symbol #>                      <numeric> <numeric> <character> #> ENSMUSG00000029304    0.734937   1.63516        Spp1 #> ENSMUSG00000050708    0.665563   1.81841        Ftl1 #> ENSMUSG00000050335    0.741474   1.68098      Lgals3 #> ENSMUSG00000021939    0.708362   1.86896        Ctsb #> ENSMUSG00000021190    0.659916   1.66838        Lgmn #> ENSMUSG00000018893    0.675840   1.82510          Mb"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"exercises-2","dir":"Articles","previous_headings":"Univariate global","what":"Exercises","title":"Exploratory spatial data analysis with Voyager","text":"Use listSFEMethods() find “name” Geary’s C (Geary 1954). name used type argument runUnivariate(). Compute Geary’s C highly variable genes, show results. Interpretation Geary’s C: value 1 indicates positive spatial autocorrelation, value 1 indicates negative spatial autocorrelation.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"further-reading","dir":"Articles","previous_headings":"Univariate global","what":"Further reading","title":"Exploratory spatial data analysis with Voyager","text":"Spatial transcriptomics data usually much larger typical geospatial dataset back 1950s Moran’s Geary’s C devised. See (Luo, Griffith, Wu 2019) asymptotic properties Moran’s large datasets normal skewed distributions. negative binomial distribution often used model transcriptomics data due bursts transcription, although Poisson distribution sometimes used instead simplify math. See (Griffith Haining 2006) consideration Poisson distribution spatial analyses. Moran’s exactly Pearson correlation values spatially smoothed values. bounds Moran’s depend spatial neighborhood graph. Usually upper bound around 1, lower bound closer -0.5 -1. See (Jong, Sprenger, Veen 1984) derivation extreme values Moran’s Geary’s C. Spatial autocorrelation decays different length scales different features, correlogram one way find length scales. vignettes use correlograms. Also see vignette Moran’s flipping signs different length scales.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"univariate-local","dir":"Articles","previous_headings":"","what":"Univariate local","title":"Exploratory spatial data analysis with Voyager","text":"Local statistics yield result location rather whole dataset, global statistics may obscure local heterogeneity. See (Fotheringham 2009) interesting discussion relationships global local spatial statistics. Local statistics stored localResults field SFE object, can accessed localResult() localResults() functions SpatialFeatureExperiment package. univariate local methods Voyager listed :","code":"listSFEMethods(variate = \"uni\", scope = \"local\") #>               name                                          description #> 1       localmoran                                      Local Moran's I #> 2  localmoran_perm                  Local Moran's I permutation testing #> 3           localC                                      Local Geary's C #> 4      localC_perm                  Local Geary's C permutation testing #> 5           localG                                      Getis-Ord Gi(*) #> 6      localG_perm             Getis-Ord Gi(*) with permutation testing #> 7             LOSH                     Local spatial heteroscedasticity #> 8          LOSH.mc Local spatial heteroscedasticity permutation testing #> 9          LOSH.cs     Local spatial heteroscedasticity Chi-square test #> 10      moran.plot                                   Moran scatter plot"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"local-morans-i","dir":"Articles","previous_headings":"Univariate local","what":"Local Moran’s I","title":"Exploratory spatial data analysis with Voyager","text":"recap, global Moran’s defined \\[ = \\frac{n}{\\sum_{=1}^n \\sum_{j=1}^n w_{ij}} \\frac{\\sum_{=1}^n \\sum_{j=1}^n w_{ij} (x_i - \\bar{x})(x_j - \\bar{x})}{\\sum_{=1}^n (x_i - \\bar{x})^2}. \\] Local Moran’s (Anselin 1995) defined \\[ I_i = (n-1)\\frac{(x_i - \\bar{x})\\sum_{j=1}^n w_{ij} (x_j - \\bar{x})}{\\sum_{=1}^n (x_i - \\bar{x})^2}. \\] ’s similar global Moran’s , values locations \\(\\) summed ’s normalization sum spatial weights. Local Moran’s used spatial transcriptomics MERINGUE package (Miller et al. 2021). compute local Moran’s gene Myh2. useful plot log normalized Myh2 gene expression context interpret local results:  local spatial results can plotted plotLocalResults(), similar plotSpatialFeature(). divergent palette used Moran’s sensible center 0 (actually expected value Moran’s -1/(n-1) mean unknown, ’s close 0 n typically large spatial -omics).  see myofiber regions higher Myh2 expression also stronger spatial autocorrelation, injury site locally negative spatial autocorrelation. results stored localResults field SFE object, getters setters analogous reducedDims, name local method feature/gene local method run need specified well. interesting see spatial autocorrelation relates gene expression level, much finding variance relates mean expression gene, usually indicates overdispersion compared Poisson scRNA-seq Visium data:  gene, Visium spots higher expression also tend higher local Moran’s , may may apply genes. vertical dashed line marks mean gene expression; note subtraction mean expression global local Moran’s , leading spots close mean local Moran’s close 0. Local spatial analyses often return matrix data frame. plotLocalResult() function default column local spatial method, columns can plotted well. Use localResultAttrs() function see columns present, use attribute argument specify column plot. local spatial methods return p-values location, column name like Pr(z != E(Ii)), test two sided (default, can changed alternative argument runUnivariate() passed relevant underlying function spdep). Negative log p-value computed facilitate visualization (smaller significant p-values plotted higher values), p-value corrected multiple hypothesis testing p.adjustSP() spdep, number tests number neighbors location rather total number locations (-log10p_adj).  plot following plots p-values, divergent palette used show locations significant adjusting multiple testing significant different colors. center divergent palette p = 0.05, brown spots significant dark blue means really significant. “pysal” column shows type neighborhood, whether low value near low values, high value near high values.","code":"sfe_tissue <- runUnivariate(sfe_tissue, type = \"localmoran\", features = \"Myh2\",                             colGraphName = \"visium\", swap_rownames = \"symbol\") plotSpatialFeature(sfe_tissue, features = \"Myh2\", colGeometryName = \"spotPoly\",                    swap_rownames = \"symbol\", image_id = \"lowres\", color = \"black\",                    linewidth = 0.1) plotLocalResult(sfe_tissue, \"localmoran\", features = \"Myh2\",                  colGeometryName = \"spotPoly\", divergent = TRUE,                 diverge_center = 0, image_id = \"lowres\",                  swap_rownames = \"symbol\", color = \"black\",                 linewidth = 0.1) lr <- localResult(sfe_tissue, type = \"localmoran\", feature = \"Myh2\",                    swap_rownames = \"symbol\") head(lr) #>                          Ii          E.Ii     Var.Ii       Z.Ii Pr(z != E(Ii)) #> AAACATTTCCCGGATT 2.12545883 -0.0012237995 0.37891181 3.45488511   5.505274e-04 #> AAACCTAAGCAGCCGG 3.33088903 -0.0038553468 0.59334776 4.32920244   1.496503e-05 #> AAACGAGACGGTTGAT 0.30430735 -0.0009817045 0.15152269 0.78428227   4.328745e-01 #> AAACGGGCGTACGGGT 4.69775712 -0.0063342069 0.97242481 4.77032239   1.839313e-06 #> AAACTCGGTTCGCAAT 0.01991573 -0.0002817611 0.04351933 0.09681804   9.228709e-01 #> AAACTGCTGGCTCCAA 0.55285063 -0.0009817045 0.15152269 1.42278566   1.547983e-01 #>                       mean    median     pysal    -log10p -log10p_adj #> AAACATTTCCCGGATT High-High High-High High-High 3.25922109    2.657161 #> AAACCTAAGCAGCCGG High-High High-High High-High 4.82492235    3.979824 #> AAACGAGACGGTTGAT   Low-Low   Low-Low   Low-Low 0.36363800    0.000000 #> AAACGGGCGTACGGGT High-High High-High High-High 5.73534434    4.890246 #> AAACTCGGTTCGCAAT High-High High-High High-High 0.03485905    0.000000 #> AAACTGCTGGCTCCAA   Low-Low   Low-Low   Low-Low 0.81023381    0.000000 df <- data.frame(myh2 = logcounts(sfe_tissue)[rowData(sfe_tissue)$symbol == \"Myh2\",],                  Ii = localResult(sfe_tissue, \"localmoran\", \"Myh2\",                                    swap_rownames = \"symbol\")[,\"Ii\"]) ggplot(df, aes(myh2, Ii)) + geom_point(alpha = 0.3) +     geom_vline(xintercept = mean(df$myh2), linetype = 2, color = \"gray\") +     geom_hline(yintercept = 0, linetype = 2, color = \"gray\") +     labs(x = \"Myh2 (log counts)\", y = \"localmoran\") localResultAttrs(sfe_tissue, \"localmoran\", \"Myh2\", swap_rownames = \"symbol\") #>  [1] \"Ii\"             \"E.Ii\"           \"Var.Ii\"         \"Z.Ii\"           #>  [5] \"Pr(z != E(Ii))\" \"mean\"           \"median\"         \"pysal\"          #>  [9] \"-log10p\"        \"-log10p_adj\" plotLocalResult(sfe_tissue, \"localmoran\", features = \"Myh2\",                  colGeometryName = \"spotPoly\", attribute = \"-log10p_adj\", divergent = TRUE,                 diverge_center = -log10(0.05), swap_rownames = \"symbol\",                 image_id = \"lowres\", color = \"black\",                 linewidth = 0.1) plotLocalResult(sfe_tissue, \"localmoran\", features = \"Myh2\",                  colGeometryName = \"spotPoly\", attribute = \"pysal\",                  swap_rownames = \"symbol\", image_id = \"lowres\", color = \"black\",                 linewidth = 0.1)"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"exercises-3","dir":"Articles","previous_headings":"Univariate local","what":"Exercises","title":"Exploratory spatial data analysis with Voyager","text":"Compute local spatial heteroscedasticity (LOSH) (J. Keith Ord Getis 2012) Myh2 plot results. sequential palette appropriate. columns returned LOSH? Plot one space. See documentation spdep::LOSH() meanings columns. spatial pattern LOSH compare local Moran genes?","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"further-reading-1","dir":"Articles","previous_headings":"Univariate local","what":"Further reading","title":"Exploratory spatial data analysis with Voyager","text":"Getis-Ord Gi* (J. K. Ord Getis 1995) another commonly used local spatial statistic identifies hotspots (high values clustered together space) coldspots (low values clostered space). vignettes use Getis-Ord Gi*. Moran scatter plot (Anselin 1996) another ESDA tool. Voyager special function plot results moranPlot(). See vignettes examples Moran scatter plot applied spatial transcriptomics. Analogous Moran scatter plot Geary scatter plot (yet implemented Voyager) proposed (Griffith Chun 2022) said better detect local negative spatial autocorrelation. paper also includes considerations Moran’s Geary’s C.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"bivariate","dir":"Articles","previous_headings":"","what":"Bivariate","title":"Exploratory spatial data analysis with Voyager","text":"spatial methods analyze two variables relate. list bivariate global methods can seen : also local bivariate methods:","code":"listSFEMethods(variate = \"bi\", scope = \"global\") #>                  name                                     description #> 1                 lee                       Lee's bivariate statistic #> 2              lee.mc Lee's bivariate static with permutation testing #> 3            lee.test                                    Lee's L test #> 4     cross_variogram                                 Cross variogram #> 5 cross_variogram_map                             Cross variogram map listSFEMethods(variate = \"bi\", scope = \"local\") #>            name                     description #> 1      locallee Local Lee's bivariate statistic #> 2 localmoran_bv       Local bivariate Moran's I"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"lees-l","dir":"Articles","previous_headings":"Bivariate","what":"Lee’s L","title":"Exploratory spatial data analysis with Voyager","text":"Lee’s L (Lee 2001) developed relating Moran’s Pearson correlation, defined \\[ L_{X,Y} = \\frac{n}{\\sum_{=1}^n \\sum_{j=1}^n w_{ij}} \\frac{\\sum_{=1}^n \\left[ \\sum_{j=1}^n w_{ij}  (x_j - \\bar{x}) \\right] \\left[ \\sum_{j=1}^n w_{ij} (y_j - \\bar{y}) \\right]}{\\sqrt{\\sum_{=1}^n (x_i - \\bar{x})^2}\\sqrt{\\sum_{=1}^n (y_i - \\bar{y})^2} }, \\] \\(n\\) number spots locations, \\(\\) \\(j\\) different locations, spots Visium context, \\(x\\) \\(y\\) variables values location, \\(w_{ij}\\) spatial weight, can inversely proportional distance spots indicator whether two spots neighbors, subject various definitions neighborhood. Giotto package implemented something like Lee’s L (Dries et al. 2021). compute Lee’s L top highly variagle genes (HVGs) dataset: bivariate global results can different formats (matrix Lee’s L lists many methods), results stored SFE object. calculateBivariate() function used perform bivariate analyses. Analogous runUnivariate() runBivariate() stores results SFE object, applies local bivariate methods whose results uniform format stored localResults field just like local univariate results. gives spatially informed correlation matrix among genes, can plotted heatmap:  coexpression blocks can seen. Note unlike Pearson correlation, diagonal 1, \\[ L_{X,X} = \\frac{\\sum_i (\\tilde x_i - \\bar x)^2}{\\sum_i (x_i - \\bar x)^2} = \\mathrm{SSS}_X, \\] approximated ratio variance spatially lagged \\(x\\) variance \\(x\\). spatial lag introduces smoothing, spatial lag reduced variance, making diagonal less 1. spatial smoothing scalar (SSS), Moran’s approximately Pearson correlation \\(X\\) spatially lagged \\(X\\) (\\(\\tilde X\\)) multiplied SSS: \\[ \\approx \\mathrm{SSS}_X \\cdot \\rho_{X, \\tilde X} \\] Similarly Lee’s L, shown (Lee 2001), \\[ L_{X, Y} = \\sqrt{\\mathrm{SSS}_X}\\sqrt{\\mathrm{SSS}_Y} \\cdot \\rho_{\\tilde X, \\tilde Y} \\] spatial clustering, variance less reduced spatial lag, leading larger SSS. Hence \\(X\\) \\(Y\\) spatially distributed like salt pepper strongly correlated, Lee’s L low lack spatial autocorrelation leads small SSS. Weighted correlation network analysis (WGCNA) (Langfelder Horvath 2008) time honored method find gene co-expression modules, can take correlation matrix. interesting apply WGCNA Lee’s L matrix identify spatially informed gene co-expression modules.","code":"hvgs <- getTopHVGs(sfe_tissue, fdr.threshold = 0.01) res <- calculateBivariate(sfe_tissue, type = \"lee\", feature1 = hvgs) pal_rng <- getDivergeRange(res) pal <- scico(256, begin = pal_rng[1], end = pal_rng[2], palette = \"vik\") pheatmap(res, color = pal, show_rownames = FALSE,           show_colnames = FALSE, cellwidth = 1, cellheight = 1,          treeheight_col = 0, treeheight_row = 0)"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"exercises-4","dir":"Articles","previous_headings":"Bivariate","what":"Exercises","title":"Exploratory spatial data analysis with Voyager","text":"Local Lee’s L analogous local Moran’s – disaggregated form Lee’s L showing contribution spot global Lee’s L. derived (Lee 2001) global Lee’s L shown. Run local Lee’s L two genes choice. can use myofiber type marker genes Myh7, Myh2, Myh4, Myh1. plot results space. Hint: Use localResultFeatures() find name results stored . interpret results? See vignette bivariate methods Voyager applied dataset, including local Lee’s L bivariate version local Moran’s .","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"multivariate","dir":"Articles","previous_headings":"","what":"Multivariate","title":"Exploratory spatial data analysis with Voyager","text":"Spatial transcriptomics data can anywhere hundreds genes whole genome. tedious manually check univariate spatial statistics one gene time. Furthermore, genes often co-regulated, univariate spatial statistics blind co-regulation. Hence multivariate spatial statistics, analyzing multiple genes simultaneously taking spatial information account. Multivariate spatial methods Voyager listed :","code":"listSFEMethods(\"multi\") #>                name                                      description #> 1        multispati                                   MULTISPATI PCA #> 2      localC_multi                     Multivariate local Geary's C #> 3 localC_perm_multi Multivariate local Geary's C permutation testing"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"non-spatial-pca","dir":"Articles","previous_headings":"Multivariate","what":"Non-spatial PCA","title":"Exploratory spatial data analysis with Voyager","text":"First run regular principal component analysis (PCA), compare type spatially informed PCA known MULTISPATI PCA (Stéphane Dray, Saı̈d, Débias 2008). Use elbow plot see variance explained PC:  Plot top gene loadings PC, contribution gene PC:  Plot first 4 PCs space  first PC separates leukocyte infiltrated injury site myofibers, PC2 PC3 tease muscle tendon junctions.","code":"hvgs2 <- getTopHVGs(dec, n = 2000) sfe_tissue <- runPCA(sfe_tissue, ncomponents = 20, subset_row = hvgs2,                      exprs_values = \"logcounts\", scale = TRUE,                      BSPARAM = IrlbaParam()) ElbowPlot(sfe_tissue) plotDimLoadings(sfe_tissue, swap_rownames = \"symbol\") spatialReducedDim(sfe_tissue, \"PCA\", 4, divergent = TRUE, diverge_center = 0,                   image_id = \"lowres\")"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"multispati-pca","dir":"Articles","previous_headings":"Multivariate","what":"MULTISPATI PCA","title":"Exploratory spatial data analysis with Voyager","text":"Spatially informed dimension reduction actually new, dates back least 1985, Wartenberg’s crossover Moran’s PCA (Wartenberg 1985), generalized developed MULTISPATI PCA (Stéphane Dray, Saı̈d, Débias 2008), implemented adespatial package CRAN. short, PCA tries maximize variance explained PC, MULTISPATI maximizes product Moran’s variance explained. Also, eigenvalues PCA non-negative, covariance matrix positive semidefinite, MULTISPATI can give negative eigenvalues, represent negative spatial autocorrelation, can present interesting common positive spatial autocorrelation often masked latter (Griffith 2019). single cell -omics conventions, let \\(X\\) denote gene count matrix whose columns cells Visium spots whose rows genes, \\(n\\) columns. Let \\(W\\) denote row normalized \\(n\\times n\\) adjacency matrix spatial neighborhood graph cells Visium spots, symmetric. MULTISPATI diagonalizes symmetric matrix \\[ H = \\frac 1 {2n} X(W^t+W)X^t \\] However, implementation adespatial general can used multivariate analyses duality diagram paradigm, correspondence analysis; equation simplified just PCA, without introduce duality diagram . compute MULTISPATI PCA, 20 positive 20 negative eigenvalues. plot positive negative eigenvalues. Note eigenvalues variance explained. Instead, product variance explained Moran’s . positive eigenvalues correspond eigenvectors simultaneously explain variance large positive Moran’s . negative eigenvalues correspond eigenvectors simultaneously explain variance negative Moran’s .  positive eigenvalues drop sharply , PC1, none negative eigenvalues seem noteworthy. However, spatial transcriptomics datasets single cell resolution, can negative eigenvalues corresponding PC biologically relevant, see vignette mouse liver data. components mean? component linear combination genes maximize product variance explained Moran’s . second component maximizes product provided ’s orthogonal first component, . loss variance explained usually huge, components can considered axes along spatially coherent groups spots separated much possible according expression highly variable genes, theory, clustering positive MULTISPATI components give spatially coherent clusters. spatial coherence, MULTISPATI might robust outliers.  Plot PCs:  unlike non-spatial PCA, PC4 continues spatially structured.","code":"sfe_tissue <- runMultivariate(sfe_tissue, \"multispati\", colGraphName = \"visium\",                               nfposi = 20, nfnega = 20, subset_row = hvgs2) ElbowPlot(sfe_tissue, nfnega = 20, reduction = \"multispati\") plotDimLoadings(sfe_tissue, dims = 1:4, reduction = \"multispati\",                 swap_rownames = \"symbol\") spatialReducedDim(sfe_tissue, \"multispati\", 4, divergent = TRUE,                    diverge_center = 0, image_id = \"lowres\")"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"clustering","dir":"Articles","previous_headings":"Multivariate > MULTISPATI PCA","what":"Clustering","title":"Exploratory spatial data analysis with Voyager","text":"PCA embeddings often used clustering scRNA-seq data analysis. perform Leiden clustering non-spatial MULTISPATI PCA embeddings. See clustering positive MULTISPATI PCs give spatially coherent clusters Plot clusters space:","code":"set.seed(29) sfe_tissue$clusts_nonspatial <- clusterCells(sfe_tissue, use.dimred = \"PCA\",                                               BLUSPARAM = NNGraphParam(                                                  cluster.fun = \"leiden\",                                                  cluster.args = list(                                                      objective_function = \"modularity\",                                                      resolution_parameter = 1                                                  )                                              )) set.seed(29) sfe_tissue$clusts_multispati <- clusterRows(reducedDim(sfe_tissue, \"multispati\")[,1:20],                                              BLUSPARAM = NNGraphParam(                                                 cluster.fun = \"leiden\",                                                 cluster.args = list(                                                     objective_function = \"modularity\",                                                     resolution_parameter = 1                                                 )                                             )) plotSpatialFeature(sfe_tissue, c(\"clusts_nonspatial\", \"clusts_multispati\"),                     colGeometryName = \"spotPoly\") &      guides(colour = guide_legend(override.aes = list(size=2), ncol = 2))"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"spatial-autocorrelation-of-principal-components","dir":"Articles","previous_headings":"Multivariate > MULTISPATI PCA","what":"Spatial autocorrelation of principal components","title":"Exploratory spatial data analysis with Voyager","text":"compare Moran’s cell embeddings non-spatial MULTISPATI PC. Just like ’s colDataUnivariate() colDataMoransI() colData columns annotGeometryUnivariate() attributes annotation geometries, univariate spatial statistics can computed cell/spot embeddings reduced dimensions, reducedDimUnivariate(), Moran’s , reducedDimMoransI(). arguments functions similar. lower upper bounds Moran’s given spatial neighborhood graph according (Jong, Sprenger, Veen 1984).  lower upper bounds Moran’s plotted horizontal dashed line. non-spatial PCA, Moran’s drops PC1 PC6, Moran’s remains high subsequent MULTISPATI PCs. Given lower bound Moran’s , negative PCs strong negative spatial autocorrelation. However, -interpreted dataset minuscule magnitude negative eigenvalues, means PCs explain little variance.","code":"# non-spatial sfe_tissue <- reducedDimMoransI(sfe_tissue, dimred = \"PCA\", components = 1:20) # spatial sfe_tissue <- reducedDimMoransI(sfe_tissue, dimred = \"multispati\", components = 1:40) df_moran <- tibble(PCA = reducedDimFeatureData(sfe_tissue, \"PCA\")$moran_Vis5A[1:20],                    MULTISPATI_pos =                         reducedDimFeatureData(sfe_tissue, \"multispati\")$moran_Vis5A[1:20],                    MULTISPATI_neg =                         reducedDimFeatureData(sfe_tissue,\"multispati\")$moran_Vis5A[21:40] |>                         rev(),                    index = 1:20) data(\"ditto_colors\") # Takes a while if not using optimized BLAS (mb <- moranBounds(colGraph(sfe_tissue, \"visium\"))) #>       Imin       Imax  #> -0.5762132  1.0021884 df_moran |>      pivot_longer(cols = -index, values_to = \"value\", names_to = \"name\") |>      ggplot(aes(index, value, color = name)) +     geom_line() +     scale_color_manual(values = ditto_colors) +     geom_hline(yintercept = 0, color = \"gray\") +     geom_hline(yintercept = mb, linetype = 2, color = \"gray\") +     scale_y_continuous(breaks = scales::breaks_pretty()) +     scale_x_continuous(breaks = scales::breaks_width(5)) +     labs(y = \"Moran's I\", color = \"Type\", x = \"Component\")"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"exercises-5","dir":"Articles","previous_headings":"Multivariate","what":"Exercises","title":"Exploratory spatial data analysis with Voyager","text":"Thought experiment: suppose perform standard PCA MULTISPATI PCA city, buildings, demographics, city divided pixels, whichever spatial features find relevant life. principal components look like? MULTISPATI PC’s differ standard PC’s?","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"further-reading-2","dir":"Articles","previous_headings":"Multivariate","what":"Further reading","title":"Exploratory spatial data analysis with Voyager","text":"multivariate spatial method Voyager Bioc 3.17 multivariate generalization local Geary’s C (Anselin 2019). See vignette application dataset. Unlike similar EDA packages spatial -omics data, Voyager extensible, can make uniform user interface run spatial methods, just like Tidymodels. See vignette extending Voyager. spatially informed dimension reduction methods designed spatial -omics data, although tend consider positive spatial autocorrelation. example, see (Shang Zhou 2022) (Velten et al. 2022). paper discusses many types multivariate spatial analyses ecology, besides MULTISPATI PCA (S. Dray et al. 2012). MULTISPATI PCA can thought two extremes. One extreme standard PCA, diagonalizes covariance matrix. extreme Moran eigen map (MEM) (Griffith 1996), uses spatial weights matrix, without data matrix. MEM’s made diagonalizing double centered spatial weights matrix. first eigenvector values make largest possible Moran’s given spatial neighborhood graph. second eigenvector also maximizes Moran’s given ’s orthogonal first eigenvector, . eigenvalues Moran’s multiplied constant. last eigenvector negative Moran’s given spatial neighborhood graph. eigenvectors, MEM’s, represent spatial structures different length scales, can selected used covariates regression account spatial autocorrelation, procedure called spatial filtering (Griffith 2000; Griffith Peres-Neto 2006). See vignette adespatial examples ecology.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"caveats","dir":"Articles","previous_headings":"","what":"Caveats","title":"Exploratory spatial data analysis with Voyager","text":"H&E image plotted behind geometries can alter perception colors geometries. devel version SFE, 3D data somewhat supported, 3D transcript spot geometries. However, sf rather limited 3D geometric operations. operations can performed x y coordinates z coordinates. workshop demonstrates ESDA single sample. However, studies often produce multiple biological replica case control groups. ESDA results can compared across samples, hopefully Bioc 3.19 release, computed jointly across samples within treatment group.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/articles/voyager.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Exploratory spatial data analysis with Voyager","text":"","code":"sessionInfo() #> R Under development (unstable) (2024-02-28 r85999) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] bluster_1.13.0                 BiocSingular_1.19.0            #>  [3] BiocNeighbors_1.21.2           pheatmap_1.0.12                #>  [5] scico_1.5.0                    tidyr_1.3.1                    #>  [7] tibble_3.2.1                   BiocParallel_1.37.0            #>  [9] patchwork_1.2.0                scales_1.3.0                   #> [11] sf_1.0-15                      Matrix_1.6-5                   #> [13] rjson_0.2.21                   scater_1.31.2                  #> [15] ggplot2_3.5.0                  scran_1.31.0                   #> [17] scuttle_1.13.0                 SFEData_1.5.0                  #> [19] Voyager_1.5.0                  SingleCellExperiment_1.25.0    #> [21] SummarizedExperiment_1.33.3    Biobase_2.63.0                 #> [23] GenomicRanges_1.55.3           GenomeInfoDb_1.39.6            #> [25] IRanges_2.37.1                 S4Vectors_0.41.3               #> [27] BiocGenerics_0.49.1            MatrixGenerics_1.15.0          #> [29] matrixStats_1.2.0              SpatialFeatureExperiment_1.5.2 #> [31] BiocStyle_2.31.0               #>  #> loaded via a namespace (and not attached): #>   [1] bitops_1.0-7              filelock_1.0.3            #>   [3] R.oo_1.26.0               lifecycle_1.0.4           #>   [5] edgeR_4.1.17              lattice_0.22-5            #>   [7] magrittr_2.0.3            limma_3.59.3              #>   [9] sass_0.4.8                rmarkdown_2.25            #>  [11] jquerylib_0.1.4           yaml_2.3.8                #>  [13] metapod_1.11.1            sp_2.1-3                  #>  [15] RColorBrewer_1.1-3        DBI_1.2.2                 #>  [17] abind_1.4-5               zlibbioc_1.49.0           #>  [19] purrr_1.0.2               R.utils_2.12.3            #>  [21] RCurl_1.98-1.14           rappdirs_0.3.3            #>  [23] GenomeInfoDbData_1.2.11   ggrepel_0.9.5             #>  [25] irlba_2.3.5.1             terra_1.7-71              #>  [27] units_0.8-5               RSpectra_0.16-1           #>  [29] dqrng_0.3.2               pkgdown_2.0.7             #>  [31] DelayedMatrixStats_1.25.1 codetools_0.2-19          #>  [33] DropletUtils_1.23.0       DelayedArray_0.29.8       #>  [35] tidyselect_1.2.0          farver_2.1.1              #>  [37] ScaledMatrix_1.11.0       viridis_0.6.5             #>  [39] BiocFileCache_2.11.1      jsonlite_1.8.8            #>  [41] e1071_1.7-14              systemfonts_1.0.5         #>  [43] tools_4.4.0               ggnewscale_0.4.10         #>  [45] ragg_1.2.7                Rcpp_1.0.12               #>  [47] glue_1.7.0                gridExtra_2.3             #>  [49] SparseArray_1.3.4         xfun_0.42                 #>  [51] EBImage_4.45.0            dplyr_1.1.4               #>  [53] HDF5Array_1.31.6          withr_3.0.0               #>  [55] BiocManager_1.30.22       fastmap_1.1.1             #>  [57] boot_1.3-30               rhdf5filters_1.15.2       #>  [59] fansi_1.0.6               spData_2.3.0              #>  [61] digest_0.6.34             rsvd_1.0.5                #>  [63] mime_0.12                 R6_2.5.1                  #>  [65] textshaping_0.3.7         colorspace_2.1-0          #>  [67] wk_0.9.1                  jpeg_0.1-10               #>  [69] RSQLite_2.3.5             R.methodsS3_1.8.2         #>  [71] utf8_1.2.4                generics_0.1.3            #>  [73] data.table_1.15.2         class_7.3-22              #>  [75] httr_1.4.7                htmlwidgets_1.6.4         #>  [77] S4Arrays_1.3.4            spdep_1.3-3               #>  [79] pkgconfig_2.0.3           gtable_0.3.4              #>  [81] blob_1.2.4                XVector_0.43.1            #>  [83] htmltools_0.5.7           bookdown_0.38             #>  [85] fftwtools_0.9-11          png_0.1-8                 #>  [87] SpatialExperiment_1.13.0  knitr_1.45                #>  [89] curl_5.2.1                proxy_0.4-27              #>  [91] cachem_1.0.8              rhdf5_2.47.4              #>  [93] stringr_1.5.1             BiocVersion_3.19.1        #>  [95] KernSmooth_2.23-22        parallel_4.4.0            #>  [97] vipor_0.4.7               AnnotationDbi_1.65.2      #>  [99] desc_1.4.3                s2_1.1.6                  #> [101] pillar_1.9.0              grid_4.4.0                #> [103] vctrs_0.6.5               dbplyr_2.4.0              #> [105] beachmat_2.19.1           sfheaders_0.4.4           #> [107] cluster_2.1.6             beeswarm_0.4.0            #> [109] evaluate_0.23             magick_2.8.3              #> [111] cli_3.6.2                 locfit_1.5-9.9            #> [113] compiler_4.4.0            rlang_1.1.3               #> [115] crayon_1.5.2              labeling_0.4.3            #> [117] classInt_0.4-10           fs_1.6.3                  #> [119] ggbeeswarm_0.7.2          stringi_1.8.3             #> [121] viridisLite_0.4.2         deldir_2.0-4              #> [123] munsell_0.5.0             Biostrings_2.71.2         #> [125] tiff_0.1-12               ExperimentHub_2.11.1      #> [127] sparseMatrixStats_1.15.0  bit64_4.0.5               #> [129] Rhdf5lib_1.25.1           KEGGREST_1.43.0           #> [131] statmod_1.5.0             highr_0.10                #> [133] AnnotationHub_3.11.1      igraph_2.0.2              #> [135] memoise_2.0.1             bslib_0.6.1               #> [137] bit_4.0.5"},{"path":[]},{"path":"https://lambdamoses.github.io/VoaygerHackathon/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lambda Moses. Author, maintainer. Alik Huseynov. Author. Lior Pachter. Author, thesis advisor.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moses L, Huseynov , Pachter L (2024). VoyagerHackathon: Voyager SFE workshop hackathon Caltech. R package version 1.0.0, https://lambdamoses.github.io/VoyagerHackathon/.","code":"@Manual{,   title = {VoyagerHackathon: Voyager and SFE workshop and hackathon at Caltech},   author = {Lambda Moses and Alik Huseynov and Lior Pachter},   year = {2024},   note = {R package version 1.0.0},   url = {https://lambdamoses.github.io/VoyagerHackathon/}, }"},{"path":"https://lambdamoses.github.io/VoaygerHackathon/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"VoyagerHackathon","text":"website spatial -omics Voyager workshop hackathon Caltech March 4-8, 2024. Event info including schedule workshop material can found website.","code":""},{"path":"https://lambdamoses.github.io/VoaygerHackathon/index.html","id":"description","dir":"","previous_headings":"Overview","what":"Description","title":"VoyagerHackathon","text":"Exploratory spatial data analysis (ESDA) can powerful approach understanding single-cell genomics datasets, yet part standard data analysis workflows. particular, geospatial analyses, developed refined decades, yet fully adapted applied spatial single-cell analysis. introduce Voyager platform, systematically brings geospatial ESDA tradition (spatial) -omics, local, bivariate, multivariate spatial methods yet commonly applied spatial -omics, united uniform user interface. Using Voyager, showcase biological insights can derived methods, biologically relevant negative spatial autocorrelation. Underlying Voyager SpatialFeatureExperiment (SFE) data structure, combines Simple Feature SingleCellExperiment AnnData represent operate geometries bundled gene expression data. Voyager comprehensive tutorials demonstrating ESDA built GitHub Actions ensure reproducibility scalability, using data popular commercial technologies. Voyager implemented R/Bioconductor Python/PyPI, features compatibility tests ensure implementations return consistent results. workshop March 4, get hands experiences R implementation SFE Voyager. First, learn create operate SFE objects. Next perform various types ESDA SFE object Voyager, learn spatial statistics behind methods. workshop material points reading methods. can read Voyager preprint. also learn write R packages use git version control. hackathon March 5-8, implement new features SFE Voyager indicated GitHub repos labeled difficulty. feel like issues challenging, can bring spatial dataset analysis. may also open issues encounter bugs want new features. Current Voyager crew (Lambda Moses Alik Huseynov) answer questions. review pull requests late April Bioconductor 3.19 release. plan split Voyager preprint separate paper SFE. Contributors added coauthors relevant paper.","code":""}]
